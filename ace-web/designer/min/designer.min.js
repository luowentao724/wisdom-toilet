function resetForm() {
    var e = d3.select("svg > g.active").data()[0];
    if (e && e.id == $("form input[name='ele.id']").val()) {
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        if ($("#eleX2").length > 0 && $("#eleX2").hasClass("easyui-numberspinner")) {
            $("#eleX2").numberspinner("setValue", e.x2)
        }
        if ($("#eleY2").length > 0 && $("#eleY2").hasClass("easyui-numberspinner")) {
            $("#eleY2").numberspinner("setValue", e.y2)
        }
        if ($("#eleWidth").length > 0 && $("#eleWidth").hasClass("easyui-numberspinner")) {
            $("#eleWidth").numberspinner("setValue", e.width)
        }
        if ($("#eleHeight").length > 0 && $("#eleHeight").hasClass("easyui-numberspinner")) {
            $("#eleHeight").numberspinner("setValue", e.height)
        }
    }
    bindBeforeunload()
}
function bindBeforeunload() {
    $(window).bind("beforeunload", function(e) {
        var t = "系统可能不会保存您所做的更改!";
        e.returnValue = t;
        return t
    })
}
function dragEleStart(e) {
    if ($("#btnEleSelect").hasClass("active")) {
        d3.event.sourceEvent.stopPropagation();
        var t = d3.select("svg > g.active").data()[0];
        if (t && t.id == $("form input[name='ele.id']").val()) {
            $("form input, form select, form textarea").trigger("change")
        }
        if (d3.select(this).classed("ele") && !d3.select(this).classed("select") && !d3.select(this).classed("active")) {
            if (d3.event.sourceEvent.ctrlKey) {
                d3.selectAll("svg g.active").classed("select", true);
                d3.selectAll("svg g.active").classed("active", false)
            } else {
                d3.selectAll("svg g.select").classed("select", false);
                d3.selectAll("svg g.active").classed("active", false)
            }
        } else if (d3.select(this).classed("select")) {
            d3.selectAll("svg g.active").classed("select", true);
            d3.selectAll("svg g.active").classed("active", false)
        }
        d3.select(this).classed("active", true);
        var r = [];
        d3.selectAll("svg > g.select,svg > g.active").each(function(e) {
            r.push($.extend({}, e))
        });
        undoArray.push({
            oper: "move",
            status: false,
            datas: r
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
    }
}
function dragEleMove() {
    if ($("#btnEleSelect").hasClass("active")) {
        moveSelect(d3.event.dx, d3.event.dy)
    }
}
function dragEleEnd() {
    if (undoArray && undoArray.length > 0) {
        var e = undoArray[undoArray.length - 1];
        if (e.oper == "move") {
            if (!e.status) {
                undoArray.pop()
            } else {
                redoArray.splice(0, redoArray.length);
                $("#btnEleRedo").addClass("disabled");
                $("#btnEleUndo").removeClass("disabled")
            }
        }
    }
}
function removeActive() {
    d3.selectAll("svg g.active").classed("active", false);
    d3.selectAll("svg g.select").classed("select", false)
}
function moveSelect(e, t) {
    var r = false;
    d3.selectAll("svg > g.select,svg > g.active").each(a);
    function a(a) {
        var n = $("svg.designer-container").width();
        var i = $("svg.designer-container").height();
        if (a.type == "line" || a.type == "scrollbar") {
            if (a.x + e < 0 || a.width + e < 0 || a.y + t < 0 || a.height + t < 0) {
                r = true
            }
        } else if (a.type == "triangle") {
            if (a.x + e < 0 || a.x2 + e < 0 || a.width + e < 0 || a.y + t < 0 || a.y2 + t < 0 || a.height + t < 0) {
                r = true
            }
        } else if (a.type == "image" || a.type == "lightImage") {
            var l = 2 * Math.PI / 360 * a.radius;
            var o = (a.x - a.x2) * Math.cos(l) - (a.y - a.y2) * Math.sin(l) + a.x2;
            if (a.radius >= 0 && a.radius < 90) {
                o = (a.x - a.x2) * Math.cos(l) - (a.y + a.height - a.y2) * Math.sin(l) + a.x2
            } else if (a.radius >= 90 && a.radius < 180) {
                o = (a.x + a.width - a.x2) * Math.cos(l) - (a.y + a.height - a.y2) * Math.sin(l) + a.x2
            } else if (a.radius >= 180 && a.radius < 270) {
                o = (a.x + a.width - a.x2) * Math.cos(l) - (a.y - a.y2) * Math.sin(l) + a.x2
            }
            var s = (a.x - a.x2) * Math.sin(l) + (a.y - a.y2) * Math.cos(l) + a.y2;
            if (a.radius >= 90 && a.radius < 180) {
                s = (a.x - a.x2) * Math.sin(l) + (a.y + a.height - a.y2) * Math.cos(l) + a.y2
            } else if (a.radius >= 180 && a.radius < 270) {
                s = (a.x + a.width - a.x2) * Math.sin(l) + (a.y + a.height - a.y2) * Math.cos(l) + a.y2
            } else if (a.radius > 270) {
                s = (a.x + a.width - a.x2) * Math.cos(l) - (a.y - a.y2) * Math.sin(l) + a.x2
            }
            if (o + e < 0 || s + t < 0) {
                r = true
            }
        } else {
            if (a.x + e < 0 || a.y + t < 0) {
                r = true
            }
        }
    }
    if (r) {
        return false
    }
    d3.selectAll("svg > g.select,svg > g.active").each(n);
    function n(r) {
        if (r.posLock) {
            return false
        }
        if (e >= 1 || t >= 1 || e <= -1 || t <= -1) {
            if (undoArray && undoArray.length > 0) {
                var a = undoArray[undoArray.length - 1];
                if (a.oper == "move") {
                    a.status = true
                }
            }
        }
        if (r.type == "line") {
            r.x += e;
            r.y += t;
            r.width += e;
            r.height += t;
            d3.select(this).selectAll("line").attr("x1", function(e) {
                return e.x
            }).attr("y1", function(e) {
                return e.y
            }).attr("x2", function(e) {
                return e.width
            }).attr("y2", function(e) {
                return e.height
            });
            moveLinePoint(d3.select(this))
        } else if (r.type == "rect" || r.type == "lightRect" || r.type == "controlText" || r.type == "controlTextFixed" || r.type == "timer" || r.type == "linkText" || r.type == "openPageText") {
            r.x += e;
            r.y += t;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2)
            }).attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (r.type == "dataText" || r.type == "text") {
            r.x += e;
            r.y += t;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("x", function(e) {
                if ("start" == e.trueAlter) {
                    return e.x
                } else if ("end" == e.trueAlter) {
                    return Math.round(e.x + e.width)
                } else {
                    return Math.round(e.x + e.width / 2)
                }
            }).attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (r.type == "image" || r.type == "lightImage") {
            r.x += e;
            r.y += t;
            r.x2 += e;
            r.y2 += t;
            d3.select(this).select("image").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (r.type == "ellipse") {
            r.x += e;
            r.y += t;
            d3.select(this).select("ellipse").attr("cx", function(e) {
                return e.x
            }).attr("cy", function(e) {
                return e.y
            });
            moveEllipsePoint(d3.select(this))
        } else if (r.type == "triangle") {
            r.x += e;
            r.y += t;
            r.x2 += e;
            r.y2 += t;
            r.width += e;
            r.height += t;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return r.x + "," + r.y + " " + r.x2 + "," + r.y2 + " " + r.width + "," + r.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (r.type == "lightCircle" || r.type == "circle") {
            r.x += e;
            r.y += t;
            d3.select(this).select("circle").attr("cx", function(e) {
                return e.x
            }).attr("cy", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            moveCirclePoint(d3.select(this))
        } else if (r.type == "fillHRect") {
            r.x += e;
            r.y += t;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2 + 5)
            }).attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (r.type == "fillVRect") {
            r.x += e;
            r.y += t;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2)
            }).attr("y", function(e) {
                return Math.round(e.y + e.height / 2 - 10)
            });
            moveRectPoint(d3.select(this))
        } else if (r.type == "dashboard") {
            r.x += e;
            r.y += t;
            d3.select(this).attr("transform", "translate(" + r.x + "," + r.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (r.type == "controlImage" || r.type == "controlImageFixed" || r.type == "linkImage" || r.type == "openPageImage" || r.type == "video") {
            r.x += e;
            r.y += t;
            d3.select(this).select("image").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            moveImagePoint(d3.select(this))
        } else if (r.type == "lineChart") {
            r.x += e;
            r.y += t;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("svg").attr("x", function(e) {
                return e.x
            }).attr("y", function(e) {
                return e.y
            });
            moveRectPoint(d3.select(this))
        } else if (r.type == "scrollbar") {
            r.x += e;
            r.y += t;
            r.width += e;
            r.height += t;
            d3.select(this).selectAll("line").attr("x1", function(e) {
                return e.x
            }).attr("y1", function(e) {
                return e.y
            }).attr("x2", function(e) {
                return e.width
            }).attr("y2", function(e) {
                return e.height
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        }
    }
    resetForm()
}
function initStrokeSelect(e, t) {
    $("body>div.combo-p").remove();
    $("#eleStrokeDasharray").combo({
        editable: false,
        panelWidth: 102,
        panelHeight: 110
    });
    $("#dasharrayOption").appendTo($("#eleStrokeDasharray").combo("panel"));
    $("#dasharrayOption li").click(function() {
        var t = $(this).attr("value");
        var r = $(this).find("div").attr("class");
        $("#eleStrokeDasharray").combo("setValue", t).combo("hidePanel");
        $("#eleStrokeDasharray").parent().find("input.textbox-text").removeClass("line line-option-1 line-option-7 line-option-8 line-option-9");
        $("#eleStrokeDasharray").parent().find("input.textbox-text").addClass(r);
        e(t)
    });
    $("#eleStrokeWidth").combo({
        editable: false,
        panelWidth: 102,
        panelHeight: 180
    });
    $("#widthOption").appendTo($("#eleStrokeWidth").combo("panel"));
    $("#widthOption li").click(function() {
        var e = $(this).attr("value");
        var r = $(this).find("div").attr("class");
        $("#eleStrokeWidth").combo("setValue", e).combo("hidePanel");
        $("#eleStrokeWidth").parent().find("input.textbox-text").removeClass("line line-option-0 line-option-1 line-option-2 line-option-3 line-option-4 line-option-5 line-option-6");
        $("#eleStrokeWidth").parent().find("input.textbox-text").addClass(r);
        t(e)
    });
    jQuery.fn.setStrokeDasharray = function(e) {
        $("#eleStrokeDasharray").combo("setValue", e);
        $("#eleStrokeDasharray").parent().find("input.textbox-text").removeClass("line line-option-1 line-option-7 line-option-8 line-option-9");
        $("#dasharrayOption li").each(function() {
            if ($(this).attr("value") == e) {
                var t = $(this).find("div").attr("class");
                $("#eleStrokeDasharray").parent().find("input.textbox-text").addClass(t)
            }
        })
    }
    ;
    jQuery.fn.setStrokeWidth = function(e) {
        $("#eleStrokeWidth").combo("setValue", e);
        $("#eleStrokeWidth").parent().find("input.textbox-text").removeClass("line line-option-0 line-option-1 line-option-2 line-option-3 line-option-4 line-option-5 line-option-6");
        $("#widthOption li").each(function() {
            if ($(this).attr("value") == e) {
                var t = $(this).find("div").attr("class");
                $("#eleStrokeWidth").parent().find("input.textbox-text").addClass(t)
            }
        })
    }
}
function numberDisable() {
    $("#eleX").numberspinner("disable");
    $("#eleY").numberspinner("disable");
    $("#eleWidth").numberspinner("disable");
    $("#eleHeight").numberspinner("disable");
    if ($("#eleX2").length > 0 && $("#eleX2").hasClass("easyui-numberspinner")) {
        $("#eleX2").numberspinner("disable")
    }
    if ($("#eleY2").length > 0 && $("#eleY2").hasClass("easyui-numberspinner")) {
        $("#eleY2").numberspinner("disable")
    }
}
function numberEnable() {
    $("#eleX").numberspinner("enable");
    $("#eleY").numberspinner("enable");
    $("#eleWidth").numberspinner("enable");
    $("#eleHeight").numberspinner("enable");
    if ($("#eleX2").length > 0 && $("#eleX2").hasClass("easyui-numberspinner")) {
        $("#eleX2").numberspinner("enable")
    }
    if ($("#eleY2").length > 0 && $("#eleY2").hasClass("easyui-numberspinner")) {
        $("#eleY2").numberspinner("enable")
    }
}
function handlerDataNaN(e) {
    if (isNaN(e.x)) {
        e.x = null
    } else {
        e.x = Math.round(e.x)
    }
    if (isNaN(e.y)) {
        e.y = null
    } else {
        e.y = Math.round(e.y)
    }
    if (isNaN(e.x2)) {
        e.x2 = null
    }
    if (isNaN(e.y2)) {
        e.y2 = null
    }
    if (isNaN(e.width)) {
        e.width = null
    } else {
        e.width = Math.round(e.width)
    }
    if (isNaN(e.height)) {
        e.height = null
    } else {
        e.height = Math.round(e.height)
    }
    if (isNaN(e.radius)) {
        e.radius = null
    } else {
        e.radius = Math.round(e.radius)
    }
    if (isNaN(e.seq)) {
        e.seq = 1e4
    }
}
Date.prototype.Format = function(e) {
    var t = {
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds(),
        "q+": Math.floor((this.getMonth() + 3) / 3),
        S: this.getMilliseconds()
    };
    if (/(y+)/.test(e))
        e = e.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var r in t)
        if (new RegExp("(" + r + ")").test(e))
            e = e.replace(RegExp.$1, RegExp.$1.length == 1 ? t[r] : ("00" + t[r]).substr(("" + t[r]).length));
    return e
}
;
var ColorFunc = function() {
    this.HexToRgb = function(e) {
        var t = /^\#?[0-9a-f]{6}$/;
        if (!t.test(e))
            return window.alert("输入错误的hex颜色值");
        e = e.replace("#", "");
        var r = e.match(/../g);
        for (var a = 0; a < 3; a++)
            r[a] = parseInt(r[a], 16);
        return r
    }
    ;
    this.RgbToHex = function(e, t, r) {
        var a = /^\d{1,3}$/;
        if (!a.test(e) || !a.test(t) || !a.test(r))
            return window.alert("输入错误的rgb颜色值");
        var n = [e.toString(16), t.toString(16), r.toString(16)];
        for (var i = 0; i < 3; i++)
            if (n[i].length == 1)
                n[i] = "0" + n[i];
        return "#" + n.join("")
    }
    ;
    this.getDarkColor = function(e, t) {
        var r = /^\#?[0-9a-f]{6}$/;
        if (!r.test(e))
            return window.alert("输入错误的hex颜色值");
        var a = this.HexToRgb(e);
        for (var n = 0; n < 3; n++)
            a[n] = Math.floor(a[n] * (1 - t));
        return this.RgbToHex(a[0], a[1], a[2])
    }
    ;
    this.getLightColor = function(e, t) {
        var r = /^\#?[0-9a-f]{6}$/;
        if (!r.test(e))
            return window.alert("输入错误的hex颜色值");
        var a = this.HexToRgb(e);
        for (var n = 0; n < 3; n++)
            a[n] = Math.floor((255 - a[n]) * t + a[n]);
        return this.RgbToHex(a[0], a[1], a[2])
    }
    ;
    this.getWebSafeColor = function(e) {
        var t = /^\#?[0-9a-f]{6}$/;
        if (!t.test(e))
            return window.alert("输入错误的hex颜色值");
        var r = this.HexToRgb(e);
        for (var a = 0; a < 3; a++) {
            var n = Math.floor(r[a] / 51) * 51;
            var i = Math.ceil(r[a] / 51) * 51;
            if (Math.abs(n - r[a]) <= Math.abs(i - r[a]))
                r[a] = n;
            else
                r[a] = i
        }
        return this.RgbToHex(r[0], r[1], r[2])
    }
};
String.prototype.getByteLen = function() {
    var e = 0;
    for (var t = 0; t < this.length; t++) {
        if ((this.charCodeAt(t) & 65280) != 0)
            e++;
        e++
    }
    return e
}
;
$(function() {
    $("#containerDialog").dialog({
        title: "页面属性",
        width: 350,
        height: 380,
        closed: true,
        modal: true,
        buttons: [{
            text: "保存",
            iconCls: "icon-ok",
            handler: function() {
                saveConProperty()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#containerDialog").dialog("close")
            }
        }]
    });
    $("#commonWH").change(function() {
        if ($("#commonWH").val()) {
            var e = $("#commonWH").val().split("*");
            $("#containerForm input[name='con.width']").val(e[0]);
            $("#containerForm input[name='con.height']").val(e[1]);
            $("#containerForm input[name='con.width']").attr("readonly", "readonly");
            $("#containerForm input[name='con.height']").attr("readonly", "readonly")
        } else {
            $("#containerForm input[name='con.width']").removeAttr("readonly");
            $("#containerForm input[name='con.height']").removeAttr("readonly")
        }
    });
    $("#btnConProperty").click(function() {
        var e = $("#containerForm").data();
        if (e) {
            $("#commonWH").val(e.width + "*" + e.height);
            if (!$("#commonWH").val()) {
                $("#commonWH").val("")
            }
            $("#commonWH").trigger("change");
            $("#containerForm input[name='con.conTitle']").val(e.conTitle);
            $("#containerForm input[name='con.width']").val(e.width);
            $("#containerForm input[name='con.height']").val(e.height);
            $("#containerForm input[name='con.bgColor']").cxColor(function(t) {
                if (e.bgColor) {
                    t.color(e.bgColor)
                } else {
                    t.color("#ffffff")
                }
            });
            if (e.bgShow) {
                $("#containerForm #bgShow0").prop("checked", false);
                $("#containerForm #bgShow1").prop("checked", true)
            } else {
                $("#containerForm #bgShow0").prop("checked", true);
                $("#containerForm #bgShow1").prop("checked", false)
            }
            $("#containerForm #clearImg").prop("checked", false)
        }
        $("#containerDialog input[name='con.bgImage']").val("");
        $("#containerDialog").dialog("open")
    });
    var designerData = {"result":true,"rule":{"comAlarm":false,"count":0,"equipType":"","id":3933,"intervalCount":3,"msgPush":"01, 02","parentId":0,"parentName":"","queryParam":"","roleType":"","ruleDesc":"测试功能用的数据","ruleName":"test","ruleType":"01","showAlarm":true,"showCommand":true,"showHistory":false,"showSignal":true,"start":0,"userId":134,"userName":""},"container":{"bgColor":"","bgImage":"","bgShow":true,"conTitle":"设备首页","conType":"2","fontSize":"","height":"768","id":4995,"pageType":true,"ruleId":3933,"ruleName":"","width":"1280"},"elements":[{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":4,"href":"","id":194582,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10000,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"video","width":3,"x":358,"x2":358,"y":322,"y2":322},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":55,"href":"","id":406337,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10000,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"video","width":120,"x":145,"x2":145,"y":459,"y2":459},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":291,"href":"","id":208918,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10001,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"image","width":743,"x":170,"x2":541,"y":115,"y2":260},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":249,"href":"","id":406328,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10002,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"line","width":222,"x":143,"x2":143,"y":125,"y2":125},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":243,"href":"","id":406329,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10003,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"line","width":249,"x":86,"x2":86,"y":192,"y2":192},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":49,"href":"","id":406330,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10004,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"ellipse","width":94,"x":205,"x2":205,"y":135,"y2":135},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":86,"href":"designer/54/544c065b-5a0a-4be4-8ebd-28fc59c6ceb2.svg","id":406331,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10005,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"image","width":115,"x":109,"x2":166,"y":321,"y2":364},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":64,"href":"","id":406332,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10006,"showBg":"1","signalFlag":"124250","signalName":"1号真空泵压力数据","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"dataText","width":123,"x":309,"x2":286,"y":82,"y2":15},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":84,"href":"","id":406333,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10007,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"lightRect","width":158,"x":300,"x2":300,"y":377,"y2":377},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":0,"href":"","id":406334,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10008,"showBg":"0","signalFlag":"124250","signalName":"1号真空泵压力数据","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"lightCircle","width":36,"x":302,"x2":96,"y":267,"y2":444},{"color":"#000","conId":4995,"content":"请输入!","control":false,"falseAlter":"","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":25,"href":"","id":406335,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10009,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"","type":"lightImage","width":69,"x":84,"x2":84,"y":259,"y2":259},{"color":"#000000","conId":4995,"content":"请输入!","control":false,"falseAlter":"#FF0000","fill":"#000000","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":0,"href":"","id":406336,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10010,"showBg":"0","signalFlag":"124250","signalName":"1号真空泵压力数据","stroke":"#FFFFFF","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"dashboard","width":57,"x":490,"x2":0,"y":60,"y2":100},{"color":"#fff","conId":4995,"content":"请输入!","control":false,"falseAlter":"_blank","fill":"#09c","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":31,"href":"","id":406338,"ids":[],"padding":0,"posLock":false,"radius":5,"ruleId":3933,"seq":10011,"showBg":"1","signalFlag":"","signalName":"","stroke":"#09c","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"http://www.lfemcp.com","type":"linkText","width":90,"x":140,"x2":140,"y":466,"y2":466},{"color":"#000","conId":4995,"content":"hh:mm:ss","control":false,"falseAlter":"#FF0000","fill":"#FFFFFF","fontFamily":"宋体","fontSize":"12px","fontWeight":"normal","height":62,"href":"","id":406339,"ids":[],"padding":0,"posLock":false,"radius":0,"ruleId":3933,"seq":10012,"showBg":"0","signalFlag":"","signalName":"","stroke":"#000000","strokeDasharray":"0","strokeLinecap":"","strokeWidth":"1","trueAlter":"#00FF00","type":"timer","width":54,"x":78,"x2":78,"y":46,"y2":46}]};
    (function(e){
        if (e.result) {
            var t = e.container;
            if (t) {
                $("#containerForm").data(t);
                $("#ruleName").empty().append(t.conTitle);
                $(document).attr("title", e.rule.ruleName);
                $("div.designer-dg").css("width", t.width);
                $("div.designer-dg").css("height", t.height);
                $("svg.designer-container").css("width", t.width);
                $("svg.designer-container").css("height", t.height);
                $("#commonWH").val(t.width + "*" + t.height);
                if (!$("#commonWH").val()) {
                    $("#commonWH").val("")
                }
                $("#commonWH").trigger("change");
                $("#containerForm input[name='con.conTitle']").val(t.conTitle);
                $("#containerForm input[name='con.width']").val(t.width);
                $("#containerForm input[name='con.height']").val(t.height);
                $("#containerForm input[name='con.bgColor']").cxColor({
                    color: t.bgColor
                });
                $("div.designer-dg").css("background-color", t.bgColor);
                if (t.bgShow) {
                    $("div.designer-dg").css("background-image", "url(empty)");
                    $("svg.designer-container").css("background-image", "url(" + initCDN + "userimg/" + t.bgImage + ")");
                    $("#containerForm #bgShow0").prop("checked", false);
                    $("#containerForm #bgShow1").prop("checked", true)
                } else {
                    var r = /^\#?[0-9a-f]{6}$/;
                    if (!r.test(t.bgColor)) {
                        t.bgColor = "#ffffff"
                    }
                    var a = new ColorFunc;
                    var n = a.getDarkColor(t.bgColor, .1);
                    var i = "linear-gradient(transparent 19px, " + n + " 19px," + n + " 20px),linear-gradient(90deg, transparent 19px, " + n + " 19px," + n + " 20px)";
                    $("div.designer-dg").css("background-image", i);
                    $("svg.designer-container").css("background-image", "url(empty)");
                    $("#containerForm #bgShow0").prop("checked", true);
                    $("#containerForm #bgShow1").prop("checked", false)
                }
            } else {
                $("#containerForm input[name='con.bgColor']").cxColor()
            }
            e.elements.map(createElement)
        }
    })(designerData)
    
    $.ajax({
        url: "DesignerContainerAction!loadContainer.action",
        data: {
            "con.id": $("#conId").val(),
            "con.ruleId": $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(e) {
            if (e.result) {
                var t = e.container;
                if (t) {
                    $("#containerForm").data(t);
                    $("#ruleName").empty().append(t.conTitle);
                    $(document).attr("title", e.rule.ruleName);
                    $("div.designer-dg").css("width", t.width);
                    $("div.designer-dg").css("height", t.height);
                    $("svg.designer-container").css("width", t.width);
                    $("svg.designer-container").css("height", t.height);
                    $("#commonWH").val(t.width + "*" + t.height);
                    if (!$("#commonWH").val()) {
                        $("#commonWH").val("")
                    }
                    $("#commonWH").trigger("change");
                    $("#containerForm input[name='con.conTitle']").val(t.conTitle);
                    $("#containerForm input[name='con.width']").val(t.width);
                    $("#containerForm input[name='con.height']").val(t.height);
                    $("#containerForm input[name='con.bgColor']").cxColor({
                        color: t.bgColor
                    });
                    $("div.designer-dg").css("background-color", t.bgColor);
                    if (t.bgShow) {
                        $("div.designer-dg").css("background-image", "url(empty)");
                        $("svg.designer-container").css("background-image", "url(" + initCDN + "userimg/" + t.bgImage + ")");
                        $("#containerForm #bgShow0").prop("checked", false);
                        $("#containerForm #bgShow1").prop("checked", true)
                    } else {
                        var r = /^\#?[0-9a-f]{6}$/;
                        if (!r.test(t.bgColor)) {
                            t.bgColor = "#ffffff"
                        }
                        var a = new ColorFunc;
                        var n = a.getDarkColor(t.bgColor, .1);
                        var i = "linear-gradient(transparent 19px, " + n + " 19px," + n + " 20px),linear-gradient(90deg, transparent 19px, " + n + " 19px," + n + " 20px)";
                        $("div.designer-dg").css("background-image", i);
                        $("svg.designer-container").css("background-image", "url(empty)");
                        $("#containerForm #bgShow0").prop("checked", true);
                        $("#containerForm #bgShow1").prop("checked", false)
                    }
                } else {
                    $("#containerForm input[name='con.bgColor']").cxColor()
                }
                e.elements.map(createElement)
            }
        },
        error: function(e) {
            if (e.responseText == "sessionOut") {
                $.messager.alert("失败", "会话丢失，请重新登录!")
            }
        }
    })
});
function createElement(e) {
    if (e.type == "line") {
        return createLine(e)
    } else if (e.type == "rect") {
        return createRect(e)
    } else if (e.type == "circle") {
        return createCircle(e)
    } else if (e.type == "ellipse") {
        return createEllipse(e)
    } else if (e.type == "triangle") {
        return createTriangle(e)
    } else if (e.type == "text") {
        return createText(e)
    } else if (e.type == "image") {
        return createImage(e)
    } else if (e.type == "dataText") {
        return createDataText(e)
    } else if (e.type == "lightRect") {
        return createLightRect(e)
    } else if (e.type == "lightCircle") {
        return createLightCircle(e)
    } else if (e.type == "lightImage") {
        return createLightImage(e)
    } else if (e.type == "fillHRect") {
        return createFillHRect(e)
    } else if (e.type == "fillVRect") {
        return createFillVRect(e)
    } else if (e.type == "dashboard") {
        return createDashBoard(e)
    } else if (e.type == "controlText" || e.type == "controlTextFixed") {
        return createControlText(e)
    } else if (e.type == "controlImage" || e.type == "controlImageFixed") {
        return createControlImage(e)
    } else if (e.type == "timer") {
        return createTimer(e)
    } else if (e.type == "lineChart") {
        return createLineChart(e)
    } else if (e.type == "linkText") {
        return createLinkText(e)
    } else if (e.type == "linkImage") {
        return createLinkImage(e)
    } else if (e.type == "openPageText") {
        return createOpenPageText(e)
    } else if (e.type == "openPageImage") {
        return createOpenPageImage(e)
    } else if (e.type == "video") {
        return createVideo(e)
    } else if (e.type == "scrollbar") {
        return createScrollbar(e)
    }
}
function saveConProperty() {
    var e = new FormData;
    if ($("#containerForm #clearImg").is(":checked")) {
        e.append("con.bgImage", "empty")
    } else {
        if ($("#containerForm input[name='con.bgImage']").get(0).files[0]) {
            if ($("#containerForm input[name='con.bgImage']").get(0).files[0].size > 1024 * 1024) {
                $.messager.alert("失败", "请上传小于1M的图片！");
                return
            }
            e.append("image", $("#containerForm input[name='con.bgImage']").get(0).files[0])
        }
    }
    if ($("#containerForm input[name='con.conTitle']").val().getByteLen() > 40) {
        $.messager.alert("失败", "页面标题不能超过40个字符(汉字占2个字符)!");
        return
    }
    e.append("con.conTitle", $("#containerForm input[name='con.conTitle']").val());
    e.append("con.width", $("#containerForm input[name='con.width']").val());
    e.append("con.height", $("#containerForm input[name='con.height']").val());
    e.append("con.bgColor", $("#containerForm input[name='con.bgColor']").val());
    e.append("con.bgShow", $("#containerForm input[name='con.bgShow']:checked").val());
    e.append("con.ruleId", $("#ruleId").val());
    e.append("con.id", $("#conId").val());
    $.ajax({
        url: "DesignerContainerAction!save.action",
        data: e,
        type: "POST",
        dataType: "json",
        processData: false,
        contentType: false,
        success: function(e) {
            if (e.result) {
                $("#containerForm").data(e.con);
                $("div.designer-dg").css("width", e.con.width);
                $("div.designer-dg").css("height", e.con.height);
                $("svg.designer-container").css("width", e.con.width);
                $("svg.designer-container").css("height", e.con.height);
                $("#conId").val(e.con.id);
                $("div.designer-dg").css("background-color", e.con.bgColor);
                if (e.con.bgShow) {
                    $("div.designer-dg").css("background-image", "url(empty)");
                    $("svg.designer-container").css("background-image", "url(" + initCDN + "userimg/" + e.con.bgImage + ")")
                } else {
                    var t = /^\#?[0-9a-f]{6}$/;
                    if (!t.test(e.con.bgColor)) {
                        e.con.bgColor = "#ffffff"
                    }
                    var r = new ColorFunc;
                    var a = r.getDarkColor(e.con.bgColor, .1);
                    var n = "linear-gradient(transparent 19px, " + a + " 19px," + a + " 20px),linear-gradient(90deg, transparent 19px, " + a + " 19px," + a + " 20px)";
                    $("div.designer-dg").css("background-image", n);
                    $("svg.designer-container").css("background-image", "url(empty)")
                }
                $("#containerDialog").dialog("close")
            } else {
                $.messager.alert("失败", e.resultMsg)
            }
        },
        error: function(e) {
            if (e.responseText == "sessionOut") {
                $.messager.alert("失败", "会话丢失，请重新登录!")
            } else {
                $.messager.alert("失败", "容器属性保存异常！")
            }
        }
    })
}
function Container() {
    this.width = "1290";
    this.height = "610";
    this.fontSize = "12px";
    this.bgColor = "#FFF";
    this.bgImage = ""
}
$(function() {
    $("#btnControlText").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initControl()
    })
});
function initControl() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("controlTextFixed",e[0],e[1]);
        t.showBg = 1;
        t.radius = 5;
        t.trueAlter = "1";
        t.fill = "#09c";
        t.color = "#fff";
        t.stroke = "#09c";
        var r = createControlText(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openControlProperty)
        }
    }
}
function createControlText(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("control-text", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("text").classed("control-text", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(function(e) {
        return e.content
    });
    r.on("click", openControlProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function createControlImage(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("image").classed("control-image", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).attr("xlink:href", function(e) {
        return initCDN + "userimg/" + e.href
    });
    r.on("click", openControlProperty);
    drawAllImagePoint(r, function() {
        r.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openControlProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && ($("#activePanel").val() == "controlTextFixed" || $("#activePanel").val() == "controlImageFixed" || $("#activePanel").val() == "controlText" || $("#activePanel").val() == "controlImage")) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/data_control.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#dataControlForm #showBg0").prop("checked", true);
            $("#dataControlForm #showBg1").prop("checked", false)
        } else {
            $("#dataControlForm #showBg0").prop("checked", false);
            $("#dataControlForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        var a = commandMap["" + e.signalFlag];
        if (a) {
            $("#eleFieldName").val(a.fieldName);
            if (a.dataType == "bit") {
                $("#eleTextTrueAlter").hide();
                $("#eleSelectTrueAlter").show();
                $("#eleDataType").val("bit");
                $("#eleSelectTrueAlter").val(e.trueAlter)
            } else {
                $("#eleTextTrueAlter").show();
                $("#eleSelectTrueAlter").hide();
                $("#eleDataType").val("unbit");
                $("#eleTextTrueAlter").val(e.trueAlter)
            }
        } else {
            $("#eleFieldName").val("");
            $("#eleTextTrueAlter").show();
            $("#eleSelectTrueAlter").hide();
            $("#eleTextTrueAlter").val(e.trueAlter)
        }
        $("#eleContent").val(e.content);
        $("#eleControlHref").attr("src", initCDN + "userimg/" + e.href);
        r(e.type)
    }
    function r(e) {
        if (e == "controlTextFixed") {
            $("#dataControlForm tr.controlText").show();
            $("#dataControlForm tr.controlImage").hide();
            $("#dataControlForm tr.controlFixed").show();
            $("#dataControlForm #showText").prop("checked", true);
            $("#dataControlForm #showImage").prop("checked", false);
            $("#dataControlForm #writeFixed").prop("checked", true);
            $("#dataControlForm #writeSet").prop("checked", false)
        } else if (e == "controlText") {
            $("#dataControlForm tr.controlText").show();
            $("#dataControlForm tr.controlImage").hide();
            $("#dataControlForm tr.controlFixed").hide();
            $("#dataControlForm #showText").prop("checked", true);
            $("#dataControlForm #showImage").prop("checked", false);
            $("#dataControlForm #writeFixed").prop("checked", false);
            $("#dataControlForm #writeSet").prop("checked", true)
        } else if (e == "controlImageFixed") {
            $("#dataControlForm tr.controlText").hide();
            $("#dataControlForm tr.controlImage").show();
            $("#dataControlForm tr.controlFixed").show();
            $("#dataControlForm #showText").prop("checked", false);
            $("#dataControlForm #showImage").prop("checked", true);
            $("#dataControlForm #writeFixed").prop("checked", true);
            $("#dataControlForm #writeSet").prop("checked", false)
        } else if (e == "controlImage") {
            $("#dataControlForm tr.controlText").hide();
            $("#dataControlForm tr.controlImage").show();
            $("#dataControlForm tr.controlFixed").hide();
            $("#dataControlForm #showText").prop("checked", false);
            $("#dataControlForm #showImage").prop("checked", true);
            $("#dataControlForm #writeFixed").prop("checked", false);
            $("#dataControlForm #writeSet").prop("checked", true)
        }
    }
}
function resetControlText(e) {
    e.selectAll("rect,text,image,g").remove();
    var t = e.data()[0];
    e.append("rect").classed("control-text", true).attr("x", t.x).attr("y", t.y).attr("rx", t.radius).attr("ry", t.radius).attr("width", t.width).attr("height", t.height).style({
        fill: t.fill,
        stroke: t.stroke,
        "stroke-width": t.strokeWidth,
        "stroke-dasharray": t.strokeDasharray,
        opacity: t.showBg
    });
    e.append("text").classed("control-text", true).attr("x", Math.round(t.x + t.width / 2)).attr("y", Math.round(t.y + t.height / 2)).attr("dy", ".3em").style("font-family", t.fontFamily).style("font-size", t.fontSize).style("font-weight", t.fontWeight).style("fill", t.color).text(t.content);
    e.on("click", openControlProperty);
    drawAllRectPoint(e, function() {
        e.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (t.posLock) {
        e.classed("lock", true)
    }
    e.classed("active", true);
    e.classed("select", true);
    $("#dataControlForm tr.controlText").show();
    $("#dataControlForm tr.controlImage").hide()
}
function resetControlImage(e) {
    e.selectAll("rect,text,image,g").remove();
    var t = e.data()[0];
    e.append("image").classed("control-image", true).attr("x", t.x).attr("y", t.y).attr("width", t.width).attr("height", t.height).attr("xlink:href", "userimg/" + t.href);
    e.on("click", openControlProperty);
    drawAllImagePoint(e, function() {
        e.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (t.posLock) {
        e.classed("lock", true)
    }
    e.classed("active", true);
    e.classed("select", true);
    $("#dataControlForm tr.controlText").hide();
    $("#dataControlForm tr.controlImage").show()
}
$(function() {
    $("#btnDashboard").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initDashBoard()
    })
});
function initDashBoard() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("dashboard",e[0],e[1]);
        t.x2 = 0;
        t.y2 = 100;
        t.fill = "#000000";
        t.stroke = "#FFFFFF";
        t.color = "#000000";
        var r = createDashBoard(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = d3.selectAll("svg > g.active").data()[0];
        e.width += d3.event.dx;
        d3.select("svg > g.active > circle.dashboard").attr("r", e.width);
        resizeDashBoard()
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 10) {
            d3.select("svg > g.active").remove()
        } else {
            moveDashBoardPoint(d3.select("svg > g.active"));
            addElement(e, openDashBoardProperty)
        }
    }
}
function createDashBoard(e) {
    if (!e.signalName) {
        e.signalName = "请绑定数据!"
    }
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).attr("transform", "translate(" + e.x + "," + e.y + ")").call(t);
    r.append("circle").classed("dashboard", true).attr("cx", 0).attr("cy", 0).attr("r", function(e) {
        return e.width
    });
    var a = d3.svg.arc().outerRadius(e.width).innerRadius(Math.round(e.width * .8));
    var n = d3.svg.arc().outerRadius(e.width).innerRadius(Math.round(e.width * .93));
    r.selectAll("path.dashboard").data([{
        startAngle: -.75 * Math.PI,
        endAngle: .75 * Math.PI
    }]).enter().append("path").classed("dashboard", true).attr("d", function(e, t) {
        return a(e, t)
    }).style("fill", e.fill);
    var i = new Array;
    var l = new Array;
    for (var o = -24; o < 25; o++) {
        if (o % 5 == 0) {
            l.push({
                startAngle: o * .03 * Math.PI,
                endAngle: o * .03 * Math.PI
            })
        } else {
            i.push({
                startAngle: o * .03 * Math.PI,
                endAngle: o * .03 * Math.PI
            })
        }
    }
    r.selectAll("path.dashboard-laxis").data(l).enter().append("path").classed("dashboard-laxis", true).attr("d", function(e, t) {
        return a(e, t)
    }).style("stroke", e.stroke);
    r.selectAll("path.dashboard-saxis").data(i).enter().append("path").classed("dashboard-saxis", true).attr("d", function(e, t) {
        return n(e, t)
    }).style("stroke", e.stroke);
    var s = 80;
    var d = 1.75 - s * .015;
    r.append("polygon").classed("dashboard-point", true).attr("points", function(e) {
        var t = .7 * e.width * Math.sin(d * Math.PI) + "," + .7 * e.width * Math.cos(d * Math.PI) + " " + .07 * e.width * Math.sin((d + .5) * Math.PI) + "," + .07 * e.width * Math.cos((d + .5) * Math.PI) + " " + .1 * e.width * Math.sin((d + 1) * Math.PI) + "," + .1 * e.width * Math.cos((d + 1) * Math.PI) + " " + .07 * e.width * Math.sin((d + 1.5) * Math.PI) + "," + .07 * e.width * Math.cos((d + 1.5) * Math.PI);
        return t
    }).style("fill", e.fill);
    var c = d3.scale.linear().domain([0, 100]).range([e.x2, e.y2]);
    r.selectAll("text.dashboard").data([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]).enter().append("text").classed("dashboard", true).attr("x", function(t) {
        var r = 1.75 - t * .015;
        return .7 * e.width * Math.sin(r * Math.PI)
    }).attr("y", function(t) {
        var r = 1.75 - t * .015;
        return .7 * e.width * Math.cos(r * Math.PI)
    }).text(function(e) {
        return Math.round(c(e) * 100) / 100
    }).style("font-family", e.fontFamily).style("fill", e.color);
    r.append("text").classed("dashboard-title", true).attr("x", 0).attr("y", -.4 * e.width).style("font-family", e.fontFamily).style("fill", e.color).text(e.signalName);
    r.append("text").classed("dashboard-value", true).attr("x", 0).attr("y", .4 * e.width).style("font-family", e.fontFamily).style("font-size", e.fontSize).style("font-weight", e.fontWeight).style("fill", e.color).text(Math.round(c(s) * 100) / 100);
    r.on("click", openDashBoardProperty);
    drawAllDashBoardPoint(r, resizeDashBoard);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function resetDashBoard(e) {
    var t = e.data()[0];
    e.attr("transform", "translate(" + t.x + "," + t.y + ")");
    e.select("circle.dashboard").attr("r", t.width);
    var r = d3.svg.arc().outerRadius(t.width).innerRadius(Math.round(t.width * .8));
    var a = d3.svg.arc().outerRadius(t.width).innerRadius(Math.round(t.width * .93));
    e.selectAll("path.dashboard").attr("d", function(e, t) {
        return r(e, t)
    });
    e.selectAll("path.dashboard-laxis").attr("d", function(e, t) {
        return r(e, t)
    });
    e.selectAll("path.dashboard-saxis").attr("d", function(e, t) {
        return a(e, t)
    });
    var n = 80;
    var i = 1.75 - n * .015;
    e.selectAll("polygon.dashboard-point").attr("points", .7 * t.width * Math.sin(i * Math.PI) + "," + .7 * t.width * Math.cos(i * Math.PI) + " " + .07 * t.width * Math.sin((i + .5) * Math.PI) + "," + .07 * t.width * Math.cos((i + .5) * Math.PI) + " " + .1 * t.width * Math.sin((i + 1) * Math.PI) + "," + .1 * t.width * Math.cos((i + 1) * Math.PI) + " " + .07 * t.width * Math.sin((i + 1.5) * Math.PI) + "," + .07 * t.width * Math.cos((i + 1.5) * Math.PI));
    var l = d3.scale.linear().domain([0, 100]).range([t.x2, t.y2]);
    e.selectAll("text.dashboard").attr("x", function(e) {
        var r = 1.75 - e * .015;
        return .7 * t.width * Math.sin(r * Math.PI)
    }).attr("y", function(e) {
        var r = 1.75 - e * .015;
        return .7 * t.width * Math.cos(r * Math.PI)
    }).text(function(e) {
        return Math.round(l(e) * 100) / 100
    });
    e.selectAll("text.dashboard-title").attr("y", -.4 * t.width);
    e.selectAll("text.dashboard-value").attr("y", .4 * t.width).text(Math.round(l(n) * 100) / 100);
    moveDashBoardPoint(e)
}
function resizeDashBoard() {
    var e = d3.selectAll("svg > g.active").data()[0];
    var t = d3.svg.arc().outerRadius(e.width).innerRadius(Math.round(e.width * .8));
    var r = d3.svg.arc().outerRadius(e.width).innerRadius(Math.round(e.width * .93));
    d3.selectAll("svg > g.active > path.dashboard").attr("d", function(e, r) {
        return t(e, r)
    });
    d3.selectAll("svg > g.active > path.dashboard-laxis").attr("d", function(e, r) {
        return t(e, r)
    });
    d3.selectAll("svg > g.active > path.dashboard-saxis").attr("d", function(e, t) {
        return r(e, t)
    });
    var a = 80;
    var n = 1.75 - a * .015;
    d3.selectAll("svg > g.active > polygon.dashboard-point").attr("points", .7 * e.width * Math.sin(n * Math.PI) + "," + .7 * e.width * Math.cos(n * Math.PI) + " " + .07 * e.width * Math.sin((n + .5) * Math.PI) + "," + .07 * e.width * Math.cos((n + .5) * Math.PI) + " " + .1 * e.width * Math.sin((n + 1) * Math.PI) + "," + .1 * e.width * Math.cos((n + 1) * Math.PI) + " " + .07 * e.width * Math.sin((n + 1.5) * Math.PI) + "," + .07 * e.width * Math.cos((n + 1.5) * Math.PI));
    d3.selectAll("svg > g.active > text.dashboard").attr("x", function(t) {
        var r = 1.75 - t * .015;
        return .7 * e.width * Math.sin(r * Math.PI)
    }).attr("y", function(t) {
        var r = 1.75 - t * .015;
        return .7 * e.width * Math.cos(r * Math.PI)
    });
    d3.selectAll("svg > g.active > text.dashboard-title").attr("y", -.4 * e.width);
    d3.selectAll("svg > g.active > text.dashboard-value").attr("y", .4 * e.width);
    $("#eleWidth").numberspinner("setValue", e.width)
}
function openDashBoardProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/data_dashboard.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleX2").val(e.x2);
        $("#eleY2").val(e.y2);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleSignalName").val(e.signalName);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
    }
}
function converColor(e, t) {
    if (t == 0) {
        return e.trueAlter
    } else if (t == 1) {
        return e.fill
    } else if (t == 2) {
        return e.falseAlter
    }
}
$(function() {
    $("#btnLineChart").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initLineChart()
    })
});
function initLineChart() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("lineChart",e[0],e[1]);
        t.showBg = 1;
        t.color = "#555";
        t.trueAlter = "#e7e7e7";
        t.stroke = "#09c";
        t.radius = 60;
        t.padding = 60;
        t.content = "0,10";
        t.falseAlter = "auto";
        var r = createLineChart(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > svg").attr("width"));
        var t = parseInt(d3.select("svg > g.active > svg").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.select("svg > g.active > svg").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > rect").attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 100 || e.height < 80) {
            d3.select("svg > g.active").remove()
        } else {
            renderChartLine(d3.select("svg > g.active"));
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openLineChartProperty)
        }
    }
}
function createLineChart(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("line-chart", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.fill,
        opacity: e.showBg
    });
    var a = r.append("svg").classed("line-chart", true).attr("x", e.x).attr("y", e.y).attr("width", e.width).attr("height", e.height).append("g").attr("transform", "translate(" + e.padding + ",30)").style({
        "font-family": e.fontFamily,
        "font-size": e.fontSize
    });
    a.append("g").classed("axis", true).classed("x-axis", true);
    a.append("g").classed("axis", true).classed("y-axis", true);
    a.append("clipPath").attr("id", "clip_" + e.id).append("rect");
    var n = [[]];
    a.selectAll("path.line").data(n).enter().append("path").attr("class", "line").attr("clip-path", "url(#clip_" + e.id + ")").style("stroke", e.stroke);
    bindLineData(r);
    renderChartLine(r);
    r.on("click", openLineChartProperty);
    drawAllRectPoint(r, function() {
        r.select("svg.line-chart").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        renderChartLine(r);
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function bindLineData(e) {
    var t = e.data()[0];
    var r = new Date;
    var a = calcLineCharYRange(t);
    var n = a[1];
    var i = a[0] - a[1];
    var l = [[{
        x: (new Date).setTime(r.getTime() - 5e4 * Number(t.radius)),
        y: n
    }, {
        x: (new Date).setTime(r.getTime() - 45e3 * Number(t.radius)),
        y: Math.round(n + .5 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 4e4 * Number(t.radius)),
        y: Math.round(n + .7 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 35e3 * Number(t.radius)),
        y: n
    }, {
        x: (new Date).setTime(r.getTime() - 3e4 * Number(t.radius)),
        y: Math.round(n + .6 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 25e3 * Number(t.radius)),
        y: Math.round(n + .8 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 2e4 * Number(t.radius)),
        y: Math.round(n + .9 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 15e3 * Number(t.radius)),
        y: Math.round(n + .4 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 1e4 * Number(t.radius)),
        y: Math.round(n + .3 * i)
    }, {
        x: (new Date).setTime(r.getTime() - 5e3 * Number(t.radius)),
        y: Math.round(n + .2 * i)
    }]];
    e.selectAll("svg path.line").data(l)
}
function calcLineCharYRange(e) {
    var t = 0
      , r = 10;
    if (e.content) {
        var a = e.content.split(",");
        if (!isNaN(a[0])) {
            t = Number(a[0])
        }
        if (a.length > 1) {
            r = Number(a[1])
        }
    }
    return [r, t]
}
function renderChartLine(e) {
    var t = e.data()[0];
    var r = t.width - 40 - t.padding;
    var a = t.height - 80;
    if (r < 0 || a < 0) {
        return false
    }
    var n = 0
      , i = 10;
    if (t.content) {
        var l = t.content.split(",");
        n = Number(l[0]);
        if (l.length > 1) {
            i = Number(l[1])
        }
    }
    var o = new Date;
    o.setTime(o.getTime() - Number(t.radius) * 6e4);
    var s = d3.time.scale().domain([o, new Date]).range([0, r]);
    var d = d3.scale.linear().domain(calcLineCharYRange(t)).range([0, a]);
    var c = calcXTick(t);
    var h = d3.time.minutes;
    if (c >= 60) {
        c = Math.round(c / 60);
        h = d3.time.hours
    }
    var u = d3.svg.axis().scale(s).tickPadding(10).tickSize(-a).tickSubdivide(true).orient("bottom").tickFormat(d3.time.format("%H:%M")).ticks(h, c);
    var g = d3.svg.axis().scale(d).tickPadding(10).tickSize(-r).tickSubdivide(true).orient("left").ticks(Math.ceil(a / 35));
    e.select("svg.line-chart > g > g.x-axis").attr("transform", function() {
        return "translate(0," + a + ")"
    }).call(u);
    e.select("svg.line-chart > g > g.y-axis").call(g);
    e.select("svg.line-chart > g > clipPath").attr("id", "clip_" + t.id);
    e.selectAll("svg.line-chart > g > path.line").attr("clip-path", "url(#clip_" + t.id + ")");
    e.select("svg.line-chart > g > clipPath#clip_" + t.id + " rect").attr("width", r).attr("height", a);
    var p = d3.svg.line().interpolate("linear").x(function(e) {
        return s(e.x)
    }).y(function(e) {
        return d(e.y)
    });
    e.selectAll("svg.line-chart > g > path.line").attr("d", p);
    e.selectAll("svg.line-chart > g > g.axis text").style("fill", t.color);
    e.selectAll("svg.line-chart > g > g.axis line").style("stroke", t.trueAlter);
    e.selectAll("svg.line-chart > g > g.axis path").style("stroke", t.trueAlter)
}
function calcXTick(e) {
    var t = Math.floor(e.width / 60);
    var r = Number(e.fontSize.replace(/px$/g, ""));
    if (r <= 10) {
        t = Math.floor(e.width / 45)
    } else if (r == 12) {
        t = Math.floor(e.width / 55)
    } else if (r == 14) {
        t = Math.floor(e.width / 65)
    } else if (r == 16) {
        t = Math.floor(e.width / 70)
    } else if (r == 18) {
        t = Math.floor(e.width / 75)
    } else if (r == 22) {
        t = Math.floor(e.width / 90)
    } else if (r == 26) {
        t = Math.floor(e.width / 100)
    } else if (r == 32) {
        t = Math.floor(e.width / 120)
    } else if (r == 48) {
        t = Math.floor(e.width / 170)
    }
    if (t < 1) {
        t = 1
    }
    var a = 5;
    var n = [1440, 720, 360, 180, 60, 30, 15, 10, 5, 1];
    for (var i = 0; i < n.length; i++) {
        if (t >= e.radius / n[i]) {
            a = n[i]
        }
    }
    return a
}
function openLineChartProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/data_linechart.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#elePadding").numberspinner("setValue", e.padding);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleRadius").val(e.radius);
        if (e.showBg == "0") {
            $("#dataLineChartForm #showBg0").prop("checked", true);
            $("#dataLineChartForm #showBg1").prop("checked", false)
        } else {
            $("#dataLineChartForm #showBg0").prop("checked", false);
            $("#dataLineChartForm #showBg1").prop("checked", true)
        }
        if (e.falseAlter == "fixed") {
            $("#dataLineChartForm #falseAlterfixed").prop("checked", true);
            $("#dataLineChartForm #falseAlterAuto").prop("checked", false);
            $("#dataLineChartForm tr.yaxis-fixed").show()
        } else {
            $("#dataLineChartForm #falseAlterfixed").prop("checked", false);
            $("#dataLineChartForm #falseAlterAuto").prop("checked", true);
            $("#dataLineChartForm tr.yaxis-fixed").hide()
        }
        var r = calcLineCharYRange(e);
        $("#eleContentMinY").val(r[1]);
        $("#eleContentMaxY").val(r[0]);
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleTrueAlter").cxColor({
                color: e.trueAlter
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.trueAlter.length > 0) {
                $("#eleTrueAlter").cxColor(function(t) {
                    t.color(e.trueAlter)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        $("#eleSignalName").val(e.signalName)
    }
}
$(function() {
    $("#btnOpenPage").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initOpenPage()
    })
});
function initOpenPage() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("openPageText",e[0],e[1]);
        t.showBg = 1;
        t.radius = 5;
        t.falseAlter = "_blank";
        t.fill = "#09c";
        t.color = "#fff";
        t.stroke = "#09c";
        var r = createOpenPageText(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openOpenPageProperty)
        }
    }
}
function createOpenPageText(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("openpage-text", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("text").classed("openpage-text", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(function(e) {
        return e.content
    });
    r.on("click", openOpenPageProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function createOpenPageImage(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("image").classed("openpage-image", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).attr("xlink:href", function(e) {
        return initCDN + "userimg/" + e.href
    });
    r.on("click", openOpenPageProperty);
    drawAllImagePoint(r, function() {
        r.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openOpenPageProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && ($("#activePanel").val() == "openPageText" || $("#activePanel").val() == "openPageImage")) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/openpage.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#OpenPageForm #showBg0").prop("checked", true);
            $("#OpenPageForm #showBg1").prop("checked", false)
        } else {
            $("#OpenPageForm #showBg0").prop("checked", false);
            $("#OpenPageForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        $("#eleContent").val(e.content);
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleOpenPageHref").attr("src", initCDN + "userimg/" + e.href);
        r(e.type)
    }
    function r(e) {
        if (e == "openPageText") {
            $("#OpenPageForm tr.openPageText").show();
            $("#OpenPageForm tr.openPageImage").hide();
            $("#OpenPageForm #showText").prop("checked", true);
            $("#OpenPageForm #showImage").prop("checked", false)
        } else if (e == "openPageImage") {
            $("#OpenPageForm tr.openPageText").hide();
            $("#OpenPageForm tr.openPageImage").show();
            $("#OpenPageForm #showText").prop("checked", false);
            $("#OpenPageForm #showImage").prop("checked", true)
        }
    }
}
function resetOpenPageText(e) {
    e.selectAll("rect,text,image,g").remove();
    var t = e.data()[0];
    e.append("rect").classed("openpage-text", true).attr("x", t.x).attr("y", t.y).attr("rx", t.radius).attr("ry", t.radius).attr("width", t.width).attr("height", t.height).style({
        fill: t.fill,
        stroke: t.stroke,
        "stroke-width": t.strokeWidth,
        "stroke-dasharray": t.strokeDasharray,
        opacity: t.showBg
    });
    e.append("text").classed("openpage-text", true).attr("x", Math.round(t.x + t.width / 2)).attr("y", Math.round(t.y + t.height / 2)).attr("dy", ".3em").style("font-family", t.fontFamily).style("font-size", t.fontSize).style("font-weight", t.fontWeight).style("fill", t.color).text(t.content);
    e.on("click", openOpenPageProperty);
    drawAllRectPoint(e, function() {
        e.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (t.posLock) {
        e.classed("lock", true)
    }
    e.classed("active", true);
    e.classed("select", true);
    $("#OpenPageForm tr.openPageText").show();
    $("#OpenPageForm tr.openPageImage").hide()
}
function resetOpenPageImage(e) {
    e.selectAll("rect,text,image,g").remove();
    var t = e.data()[0];
    e.append("image").classed("openpage-image", true).attr("x", t.x).attr("y", t.y).attr("width", t.width).attr("height", t.height).attr("xlink:href", "userimg/" + t.href);
    e.on("click", openOpenPageProperty);
    drawAllImagePoint(e, function() {
        e.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (t.posLock) {
        e.classed("lock", true)
    }
    e.classed("active", true);
    e.classed("select", true);
    $("#OpenPageForm tr.openPageText").hide();
    $("#OpenPageForm tr.openPageImage").show()
}
$(function() {
    $("#btnScrollBar").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initScrollbar()
    })
});
function initScrollbar() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("scrollbar",e[0],e[1]);
        t.width = e[0];
        t.height = e[1];
        t.stroke = "#ff0000";
        t.strokeWidth = 10;
        t.strokeDasharray = "10 10";
        t.strokeLinecap = "3000";
        t.radius = 3e4;
        t.showBg = 1;
        t.fill = "#000000";
        t.content = "X!=0";
        var r = createScrollbar(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        d3.select("svg g.active line.scrollbar-line").attr("x2", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("y2", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg g.active polygon.scrollbar-border").attr("points", calcScrollbarPoints)
    }
    function a() {
        var e = d3.select("svg > g.active > line.scrollbar-line").data()[0];
        var t = Math.abs(e.x - e.width);
        var r = Math.abs(e.y - e.height);
        if (t < 2 && r < 2) {
            d3.select("svg g.active").remove()
        } else {
            moveLinePoint(d3.select("svg > g.active"));
            addElement(e, openScrollbarProperty)
        }
    }
}
function createScrollbar(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("line").classed("scrollbar-line", true).attr("x1", e.x).attr("y1", e.y).attr("x2", e.width).attr("y2", e.height).style({
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.append("polygon").classed("scrollbar-border", true).attr("stroke", e.fill).attr("points", calcScrollbarPoints(e)).style("opacity", e.showBg);
    r.on("click", openScrollbarProperty);
    drawAllLinePoint(r, function() {
        r.select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function calcScrollbarPoints(e) {
    var t = e.width - e.x;
    var r = e.height - e.y;
    var a = Math.atan(r / t);
    var n = e.strokeWidth / 2 + 2;
    var i = Math.sin(a) * n;
    var l = Math.cos(a) * n;
    if (isNaN(i) || isNaN(l)) {
        return ""
    }
    var o = e.x + i + "," + (e.y - l);
    var s = e.width + i + "," + (e.height - l);
    var d = e.width - i + "," + (e.height + l);
    var c = e.x - i + "," + (e.y + l);
    return o + " " + s + " " + d + " " + c
}
function openScrollbarProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/scrollbar.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleStrokeWidth").numberspinner("setValue", e.strokeWidth);
        if (e.strokeDasharray) {
            var r = e.strokeDasharray.split(" ");
            if (r[0]) {
                $("#eleStrokeDasharray1").numberspinner("setValue", parseInt(r[0]))
            } else {
                $("#eleStrokeDasharray1").numberspinner("setValue", 10)
            }
            if (r[1]) {
                $("#eleStrokeDasharray2").numberspinner("setValue", parseInt(r[1]))
            } else {
                $("#eleStrokeDasharray2").numberspinner("setValue", 10)
            }
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (e.showBg == "0") {
            $("#scrollbarForm #showBg0").prop("checked", true);
            $("#scrollbarForm #showBg1").prop("checked", false)
        } else {
            $("#scrollbarForm #showBg0").prop("checked", false);
            $("#scrollbarForm #showBg1").prop("checked", true)
        }
        if (e.strokeLinecap == "3000") {
            $("#scrollbarForm #strokeLinecapForward").prop("checked", true);
            $("#scrollbarForm #strokeLinecapBack").prop("checked", false)
        } else {
            $("#scrollbarForm #strokeLinecapForward").prop("checked", false);
            $("#scrollbarForm #strokeLinecapBack").prop("checked", true)
        }
        if (t) {
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleFill").cxColor({
                color: e.fill
            })
        } else {
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
        }
        $("#eleSignalName").val(e.signalName);
        $("#eleRadius").val(e.radius);
        if (e.content) {
            var a = e.content.replace(/[0-9\.\-]/gi, "").replace("X", "");
            $("#eleContentSelect").val(a);
            var n = e.content.replace(/[^0-9\.\-]/gi, "");
            $("#eleContentInput").val(n)
        }
    }
}
$(function() {
    $("#btnDataText").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initDataText()
    })
});
function initDataText() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("dataText",e[0],e[1]);
        t.showBg = 1;
        t.trueAlter = "middle";
        var r = createDataText(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openDataTextProperty)
        }
    }
}
function createDataText(e) {
    if (!e.signalName) {
        e.signalName = "请绑定数据!"
    }
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("data-text", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("text").classed("data-text", true).style("text-anchor", function(e) {
        return e.trueAlter
    }).attr("x", function(e) {
        if ("start" == e.trueAlter) {
            return e.x
        } else if ("end" == e.trueAlter) {
            return Math.round(e.x + e.width)
        } else {
            return Math.round(e.x + e.width / 2)
        }
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(function(e) {
        return e.signalName
    });
    r.on("click", openDataTextProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            if ("start" == e.trueAlter) {
                return e.x
            } else if ("end" == e.trueAlter) {
                return Math.round(e.x + e.width)
            } else {
                return Math.round(e.x + e.width / 2)
            }
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openDataTextProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/data_text.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleTrueAlter").val(e.trueAlter);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#dataTextForm #showBg0").prop("checked", true);
            $("#dataTextForm #showBg1").prop("checked", false)
        } else {
            $("#dataTextForm #showBg0").prop("checked", false);
            $("#dataTextForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleSignalName").val(e.signalName)
    }
}
$(function() {
    var e = [{
        id: 9,
        type: "mypics",
        text: "我的图库"
    }, {
        id: 10,
        type: "valve",
        text: "阀"
    }, {
        id: 11,
        type: "pump",
        text: "泵"
    }, {
        id: 12,
        type: "button",
        text: "按钮"
    }, {
        id: 13,
        type: "pipe",
        text: "管道"
    }, {
        id: 14,
        type: "motor",
        text: "马达"
    }, {
        id: 15,
        type: "dashboard",
        text: "仪表"
    }, {
        id: 16,
        type: "reactor",
        text: "反应器"
    }, {
        id: 17,
        type: "tanks",
        text: "储藏罐"
    }, {
        id: 18,
        type: "agitator",
        text: "搅拌器"
    }, {
        id: 19,
        type: "light",
        text: "指示灯"
    }, {
        id: 20,
        type: "building",
        text: "建筑物"
    }, {
        id: 21,
        type: "conveying",
        text: "物料输送"
    }, {
        id: 22,
        type: "equipment",
        text: "机械设备"
    }, {
        id: 23,
        type: "electric",
        text: "电气符号"
    }, {
        id: 24,
        type: "air-conditioning",
        text: "空调系统"
    }, {
        id: 25,
        type: "fluid-symbol",
        text: "流体符号"
    }, {
        id: 26,
        type: "life-sign",
        text: "生活标志"
    }, {
        id: 27,
        type: "symbol",
        text: "动态图标"
    }, {
        id: 99,
        type: "other",
        text: "其他"
    }];
    $("#databaseDialog").dialog({
        title: "图库",
        width: 800,
        height: 500,
        closed: true,
        modal: true,
        toolbar: "#dlgToolbar",
        buttons: "#dlgButtons"
    });
    $("#addEleDialog").dialog({
        title: "上传图片",
        width: 330,
        height: 200,
        closed: true,
        modal: true,
        buttons: [{
            text: "上传",
            iconCls: "icon-ok",
            handler: function() {
                uploadImage()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#addEleDialog").dialog("close")
            }
        }]
    });
    $("#uploadImagesDialog").dialog({
        title: "上传图片",
        width: 330,
        height: 180,
        closed: true,
        modal: true,
        buttons: [{
            text: "上传",
            iconCls: "icon-ok",
            handler: function() {
                uploadImages()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#uploadImagesDialog").dialog("close")
            }
        }]
    });
    $("#dbMenu").tree({
        data: e,
        onClick: function(e) {
            if (e.type != "all") {
                loadImages(e.type)
            }
        }
    });
    $("#btnUploadImage").click(function() {
        var e = $("#dbMenu").tree("getSelected");
        if ($("#roleType").val() == "00" || e.type == "mypics") {
            $("#addEleDialog input").val("");
            $("#addEleDialog").dialog("open")
        } else {
            $.messager.alert("错误", "您只能在“我的图库”中上传图片!")
        }
    });
    $("#btnUploadImages").click(function() {
        var e = $("#dbMenu").tree("getSelected");
        if ($("#roleType").val() == "00" || e.type == "mypics") {
            $("#uploadImagesDialog input").val("");
            $("#uploadImagesDialog").dialog("open")
        } else {
            $.messager.alert("错误", "您只能在“我的图库”中上传图片!")
        }
    });
    $("#btnRemoveImage").click(function() {
        removeImage()
    })
});
function loadImages(e) {
    $("#imgGroup").empty();
    $.ajax({
        url: "/public/index.php/admin/Picture/index",
        data: {
            "type": e
        },
        type: "get",
        dataType: "json",
        success: function(e) {
            if (e.code==1) {
                console.log(e.data.list);
                e.data.list.map(function(e) {
                    var t = $('<div class="img-wapper"><span></span><img id="ele_' + e.PICT_ID + '" title="' + e.PICT_NAME + '" src="' + "/userimg/designer/" + e.PICT_TYPE_id + "/" + e.PICT_NAME + '"/></div>');
                    t.dblclick(function() {
                        $("#imgGroup div.img-wapper").removeClass("active");
                        $(this).addClass("active");
                        setImage()
                    }).click(function() {
                        $("#imgGroup div.img-wapper").removeClass("active");
                        $(this).addClass("active")
                    });
                    $("#imgGroup").append(t)
                })
            }
        },
        error: function(e) {
            $.messager.alert("错误", "图库加载异常！")
        }
    })
}
function uploadImage() {
    var e = $("#dbMenu").tree("getSelected");
    var t = new FormData;
    if ($("#addEleDialog input[name='ele.href']").get(0).files[0]) {
        if ($("#addEleDialog input[name='ele.href']").get(0).files[0].size > 200 * 1024) {
            $.messager.alert("错误", "请上传小于200K的图片！");
            return
        }
        t.append("image", $("#addEleDialog input[name='ele.href']").get(0).files[0])
    } else {
        $.messager.alert("提示", "请选择要上传的图片！");
        return
    }
    t.append("ele.type", e.type);
    $.ajax({
        url: "DesignerDatabaseAction!add.action",
        data: t,
        type: "POST",
        dataType: "json",
        processData: false,
        contentType: false,
        success: function(e) {
            if (e.result) {
                var t = e.ele;
                var r = $('<div class="img-wapper"><span></span><img id="ele_' + t.id + '" title="' + t.title + '" src="' + initCDN + "userimg/" + t.href + '"/></div>');
                r.dblclick(function() {
                    $("#imgGroup div.img-wapper").removeClass("active");
                    $(this).addClass("active");
                    setImage()
                }).click(function() {
                    $("#imgGroup div.img-wapper").removeClass("active");
                    $(this).addClass("active")
                });
                $("#imgGroup").append(r);
                $("#imgGroup div.img-wapper").removeClass("active");
                r.addClass("active");
                $("#addEleDialog").dialog("close")
            } else {
                $.messager.alert("错误", e.resultMsg)
            }
        },
        error: function(e) {
            $.messager.alert("错误", "上传图片异常！")
        }
    })
}
function uploadImages() {
    var e = $("#dbMenu").tree("getSelected");
    var t = $("#uploadImagesDialog #image").get(0).files;
    for (var r in t) {
        var a = t[r];
        var n = new FormData;
        n.append("image", a);
        n.append("ele.type", e.type);
        $.ajax({
            url: "DesignerDatabaseAction!add.action",
            data: n,
            async: false,
            type: "POST",
            dataType: "json",
            processData: false,
            contentType: false
        })
    }
}
function removeImage() {
    if ($("#imgGroup>div.active>img").length > 0) {
        var e = $("#imgGroup>div.active>img").attr("id");
        $.messager.confirm("确定", "确定要删除该图片吗?", function(t) {
            if (t) {
                $.ajax({
                    url: "DesignerDatabaseAction!delete.action",
                    data: {
                        "ele.id": e.substring(4)
                    },
                    type: "POST",
                    dataType: "json",
                    success: function(e) {
                        if (e.result) {
                            $("#imgGroup div.active").remove()
                        } else {
                            $.messager.alert("错误", e.resultMsg)
                        }
                    },
                    error: function(e) {
                        $.messager.alert("错误", "删除图片异常！")
                    }
                })
            }
        })
    } else {
        $.messager.alert("提示", "请选择要删除的图片！")
    }
}
function setImage() {
    var e = $("#imgGroup>div.active>img").attr("src");
    if (e) {
        $("#propertyPanel img.active").attr("src", e);
        var t = $("#propertyPanel img.active").attr("id");
        if (t == "eleHref") {
            d3.select("svg > g.active > image.shape-image").attr("xlink:href", function(t) {
                if (t.href != e) {
                    savePropertyUndo()
                }
                t.href = e;
                return t.href
            })
        } else if (t == "eleTrueAlter") {
            d3.select("svg > g.active > image.light-image").attr("xlink:href", function(t) {
                if (t.trueAlter != e) {
                    savePropertyUndo()
                }
                t.trueAlter = e;
                return t.trueAlter
            })
        } else if (t == "eleFalseAlter") {
            var r = d3.select("svg > g.active").data()[0];
            if (r.falseAlter != e) {
                savePropertyUndo()
            }
            r.falseAlter = e
        } else if (t == "eleControlHref") {
            d3.select("svg > g.active > image.control-image").attr("xlink:href", function(t) {
                if (t.href != e) {
                    savePropertyUndo()
                }
                t.href = e;
                return t.href
            })
        } else if (t == "eleLinkHref") {
            d3.select("svg > g.active > image.link-image").attr("xlink:href", function(t) {
                if (t.href != e) {
                    savePropertyUndo()
                }
                t.href = e;
                return t.href
            })
        } else if (t == "eleOpenPageHref") {
            d3.select("svg > g.active > image.openpage-image").attr("xlink:href", function(t) {
                if (t.href != e) {
                    savePropertyUndo()
                }
                t.href = e;
                return t.href
            })
        }
        $("#databaseDialog").dialog("close")
    } else {
        $.messager.alert("提示", "请选择要设置的图片！")
    }
}
$(function() {
    $("#signalListDialog").dialog({
        title: "选择实时数据",
        width: 800,
        height: 580,
        closed: true,
        modal: true,
        buttons: [{
            text: "保存",
            iconCls: "icon-ok",
            handler: function() {
                selectSignal()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#signalListDialog").dialog("close")
            }
        }]
    });
    $("#removeSignalQuery").click(function() {
        $("#querySignalParam").val("")
    });
    $("#querySignalParam").keydown(function(e) {
        if (e.keyCode == 13) {
            querySignal(1, true)
        }
    });
    $("#submitSignalSearch").click(function() {
        querySignal(1, true)
    });
    $("#commandListDialog").dialog({
        title: "选择读写数据",
        width: 800,
        height: 550,
        closed: true,
        modal: true,
        buttons: [{
            text: "保存",
            iconCls: "icon-ok",
            handler: function() {
                selectCommand()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#commandListDialog").dialog("close")
            }
        }]
    });
    $("#removeCommandQuery").click(function() {
        $("#queryCommandParam").val("")
    });
    $("#queryCommandParam").keydown(function(e) {
        if (e.keyCode == 13) {
            queryCommand(1, true)
        }
    });
    $("#submitCommandSearch").click(function() {
        queryCommand(1, true)
    })
});
function querySignal(e, t) {
    $.ajax({
        url: "RuleAction!querySignals.action",
        data: {
            pagenum: e,
            queryParam: $("#querySignalParam").val(),
            ruleId: $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(r) {
            if (r.result) {
                var a = r.list;
                var n = "";
                for (var i = 0; i < a.length; i = i + 1) {
                    var l = a[i];
                    var o = "";
                    if (l.functionCode == "03" || l.functionCode == "04") {
                        if (l.dataType == "bit") {
                            o = "(" + l.bitPos + ")"
                        }
                    }
                    n += "<tr onclick='checkSignalRadio(this)'><td><input type='radio' name='radioSignalId' value='" + l.id + "'/>" + "</td><td class='tdSignalName'>" + l.signalName + "</td><td class='tdSignalSlaveAddress'>" + l.unsignedSlave + "</td><td class='tdSignalFunctionCode'>" + convertFunctionCode(l.functionCode) + "</td><td class='tdSignalAddress'>" + l.address + o + "</td><td class='tdSignalDataType'>" + convertDataType(l.dataType) + "</td><td class='tdSignalUnit'>" + l.unit + "</td></tr>"
                }
                $(".signal_load_list").empty().append(n);
                if (t) {
                    initSignalPager(r.totalPage, r.totalCount, e)
                }
            } else {
                $(".signal_load_list").empty().append('<tr><td colspan="7">查询数据为空!</td></tr>');
                initSignalPager(0, 0)
            }
        },
        error: function(e) {
            $(".signal_load_list").empty().append('<tr><td colspan="7">查询异常或数据为空!</td></tr>');
            initSignalPager(0, 0)
        }
    })
}
function initSignalPager(e, t, r) {
    if (e < 1) {
        e = 1
    }
    var a = {
        bootstrapMajorVersion: 3,
        currentPage: r,
        totalPages: e,
        size: "small",
        alignment: "right",
        onPageClicked: function(e, t, r, a) {
            querySignal(a, false)
        }
    };
    $("#signalPageRight").bootstrapPaginator(a);
    $("#signalTotalCount").empty().append(t)
}
function selectSignal() {
    var e = $('input[name="radioSignalId"]:checked').val();
    var t = d3.select("svg > g.active").data()[0];
    if (e) {
        if (t.signalFlag != e) {
            savePropertyUndo()
        }
        t.signalName = $('input[name="radioSignalId"]:checked').parent().parent().find(".tdSignalName").html();
        t.signalFlag = e;
        if ($("#activePanel").val() == "dataText") {
            $("#eleSignalName").val(t.signalName);
            d3.select("svg > g.active > text.data-text").text(t.signalName)
        } else if ($("#activePanel").val() == "lightRect") {
            $("#eleSignalName").val(t.signalName);
            d3.select("svg > g.active > text.light-rect").text(t.signalName)
        } else if ($("#activePanel").val() == "lightImage") {
            $("#eleSignalName").val(t.signalName)
        } else if ($("#activePanel").val() == "lightCircle") {
            $("#eleSignalName").val(t.signalName);
            d3.select("svg > g.active > text.light-circle").text(t.signalName)
        } else if ($("#activePanel").val() == "fillHRect" || $("#activePanel").val() == "fillVRect") {
            $("#eleSignalName").val(t.signalName);
            d3.select("svg > g.active > text.fill-rect").text(t.signalName)
        } else if ($("#activePanel").val() == "dashboard") {
            $("#eleSignalName").val(t.signalName);
            d3.select("svg > g.active > text.dashboard-title").text(t.signalName)
        } else if ($("#activePanel").val() == "scrollbar") {
            $("#eleSignalName").val(t.signalName)
        } else if ($("#activePanel").val() == "lineChart") {
            $("#eleSignalName").val(t.signalName)
        }
    }
    $("#signalListDialog").dialog("close")
}
function checkSignalRadio(e) {
    $(e).find("input[name='radioSignalId']").prop("checked", true)
}
function queryCommand(e, t) {
    $.ajax({
        url: "RuleAction!queryCommand.action",
        data: {
            pagenum: e,
            queryParam: $("#queryCommandParam").val(),
            ruleId: $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(r) {
            if (r.result) {
                var a = r.list;
                var n = "";
                for (var i = 0; i < a.length; i = i + 1) {
                    var l = a[i];
                    n += "<tr onclick='checkCommandRadio(this)'><td><input type='radio' name='radioCommandId' value='" + l.id + "'/>" + "</td><td class='tdCommandName'>" + l.fieldName + "</td><td class='tdCommandSlaveAddress'>" + l.unsignedSlave + "</td><td class='tdCommandFuncCode'>" + convertFunctionCode(l.functionCode) + "</td><td class='tdCommandAddress'>" + l.regAddress + "</td><td class='tdCommandDataType'>" + convertDataType(l.dataType) + "</td><td class='tdCommandUnit'>" + l.unit + "</td></tr>"
                }
                $(".command_load_list").empty().append(n);
                if (t) {
                    initCommandPager(r.totalPage, r.totalCount, e)
                }
            } else {
                $(".command_load_list").empty().append('<tr><td colspan="11">查询数据为空!</td></tr>');
                initCommandPager(0, 0)
            }
        },
        error: function(e) {
            $(".command_load_list").empty().append('<tr><td colspan="11">查询异常或数据为空!</td></tr>');
            initCommandPager(0, 0)
        }
    })
}
function initCommandPager(e, t, r) {
    if (e < 1) {
        e = 1
    }
    var a = {
        bootstrapMajorVersion: 3,
        currentPage: r,
        totalPages: e,
        size: "small",
        alignment: "right",
        onPageClicked: function(e, t, r, a) {
            queryCommand(a, false)
        }
    };
    $("#commandPageRight").bootstrapPaginator(a);
    $("#commandTotalCount").empty().append(t)
}
function selectCommand() {
    if ($("#activePanel").val() == "controlTextFixed" || $("#activePanel").val() == "controlImageFixed" || $("#activePanel").val() == "controlText" || $("#activePanel").val() == "controlImage") {
        var e = $('input[name="radioCommandId"]:checked').val();
        if (e) {
            var t = d3.select("svg > g.active").data()[0];
            if (t.signalFlag != e) {
                savePropertyUndo()
            }
            if (e != t.signalFlag) {
                var r = $('input[name="radioCommandId"]:checked').parent().parent().find(".tdCommandDataType").html();
                if (r == "开关量") {
                    $("#eleDataType").val("bit");
                    $("#eleTextTrueAlter").hide();
                    $("#eleSelectTrueAlter").show()
                } else {
                    $("#eleDataType").val("unbit");
                    $("#eleTextTrueAlter").show();
                    $("#eleSelectTrueAlter").hide()
                }
                $("#eleTextTrueAlter").val("");
                $("#eleSelectTrueAlter").val("");
                t.trueAlter = ""
            }
            t.signalName = $('input[name="radioCommandId"]:checked').parent().parent().find(".tdCommandName").html();
            $("#eleFieldName").val(t.signalName);
            t.signalFlag = e
        }
    }
    $("#commandListDialog").dialog("close")
}
function checkCommandRadio(e) {
    $(e).find("input[name='radioCommandId']").prop("checked", true)
}
function convertFunctionCode(e) {
    if (e == 1) {
        return "01:读线圈"
    } else if (e == 2) {
        return "02:读离散量输入"
    } else if (e == 3) {
        return "03:读保持寄存器"
    } else if (e == 4) {
        return "04:读输入寄存器"
    } else if (e == 5) {
        return "05:写单个线圈"
    } else if (e == 6) {
        return "06:写单个寄存器"
    } else if (e == 16) {
        return "16:写多个寄存器"
    }
}
function convertDataType(e) {
    if (e == "short") {
        return "16位整型(有符号)"
    } else if (e == "unshort") {
        return "16位整型(无符号)"
    } else if (e == "int") {
        return "32位整型(有符号)"
    } else if (e == "unint") {
        return "32位整型(无符号)"
    } else if (e == "float") {
        return "浮点型"
    } else if (e == "bit") {
        return "开关量"
    }
}
function drawAllCirclePoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawCirclePoint(Math.round(r.x - 3), Math.round(r.y - r.width - 3), "top", e, t);
    drawCirclePoint(Math.round(r.x + r.width - 3), Math.round(r.y - 3), "right", e, t);
    drawCirclePoint(Math.round(r.x - 3), Math.round(r.y + r.width - 3), "bottom", e, t);
    drawCirclePoint(Math.round(r.x - r.width - 3), Math.round(r.y - 3), "left", e, t)
}
function drawCirclePoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l(e) {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("left" == t) {
            d()
        } else if ("right" == t) {
            c()
        } else if ("top" == t) {
            h()
        } else if ("bottom" == t) {
            u()
        }
        if (n) {
            n()
        }
    }
    function d() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        if (e.width < 0) {
            e.width += d3.event.dx
        }
        a.select("circle").attr("r", e.width);
        moveCirclePoint(a)
    }
    function c(e) {
        var e = a.data()[0];
        e.width += d3.event.dx;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        a.select("circle").attr("r", e.width);
        moveCirclePoint(a)
    }
    function h(e) {
        var e = a.data()[0];
        e.width -= d3.event.dy;
        if (e.width < 0) {
            e.width += d3.event.dy
        }
        a.select("circle").attr("r", e.width);
        moveCirclePoint(a)
    }
    function u(e) {
        var e = a.data()[0];
        e.width += d3.event.dy;
        if (e.width < 0) {
            e.width -= d3.event.dy
        }
        a.select("circle").attr("r", e.width);
        moveCirclePoint(a)
    }
}
function moveCirclePoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.top").attr("x", t.x - 3).attr("y", t.y - t.width - 3);
        r.select("rect.right").attr("x", t.x + t.width - 3).attr("y", t.y - 3);
        r.select("rect.bottom").attr("x", t.x - 3).attr("y", t.y + t.width - 3);
        r.select("rect.left").attr("x", t.x - t.width - 3).attr("y", t.y - 3)
    }
}
function drawAllDashBoardPoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawDashBoardPoint(-3, -r.width - 3, "top", e, t);
    drawDashBoardPoint(r.width - 3, -3, "right", e, t);
    drawDashBoardPoint(-3, r.width - 3, "bottom", e, t);
    drawDashBoardPoint(-r.width - 3, -3, "left", e, t)
}
function drawDashBoardPoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l(e) {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("left" == t) {
            d()
        } else if ("right" == t) {
            c()
        } else if ("top" == t) {
            h()
        } else if ("bottom" == t) {
            u()
        }
        if (n) {
            n()
        }
    }
    function d() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        if (e.width < 0) {
            e.width += d3.event.dx
        }
        a.select("circle").attr("r", e.width);
        moveDashBoardPoint(a)
    }
    function c(e) {
        var e = a.data()[0];
        e.width += d3.event.dx;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        a.select("circle").attr("r", e.width);
        moveDashBoardPoint(a)
    }
    function h(e) {
        var e = a.data()[0];
        e.width -= d3.event.dy;
        if (e.width < 0) {
            e.width += d3.event.dy
        }
        a.select("circle").attr("r", e.width);
        moveDashBoardPoint(a)
    }
    function u(e) {
        var e = a.data()[0];
        e.width += d3.event.dy;
        if (e.width < 0) {
            e.width -= d3.event.dy
        }
        a.select("circle").attr("r", e.width);
        moveDashBoardPoint(a)
    }
}
function moveDashBoardPoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.top").attr("y", -t.width - 3);
        r.select("rect.right").attr("x", t.width - 3);
        r.select("rect.bottom").attr("y", t.width - 3);
        r.select("rect.left").attr("x", -t.width - 3)
    }
}
function drawAllEllipsePoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawEllipsePoint(Math.round(r.x - 3), Math.round(r.y - r.height - 3), "top", e, t);
    drawEllipsePoint(Math.round(r.x + r.width - 3), Math.round(r.y - 3), "right", e, t);
    drawEllipsePoint(Math.round(r.x - 3), Math.round(r.y + r.height - 3), "bottom", e, t);
    drawEllipsePoint(Math.round(r.x - r.width - 3), Math.round(r.y - 3), "left", e, t)
}
function drawEllipsePoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l(e) {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("left" == t) {
            d()
        } else if ("right" == t) {
            c()
        } else if ("top" == t) {
            h()
        } else if ("bottom" == t) {
            u()
        }
        if (n) {
            n()
        }
    }
    function d() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        if (e.width < 0) {
            e.width += d3.event.dx
        }
        a.select("ellipse").attr("rx", e.width);
        moveEllipsePoint(a)
    }
    function c(e) {
        var e = a.data()[0];
        e.width += d3.event.dx;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        a.select("ellipse").attr("rx", e.width);
        moveEllipsePoint(a)
    }
    function h(e) {
        var e = a.data()[0];
        e.height -= d3.event.dy;
        if (e.height < 0) {
            e.height += d3.event.dy
        }
        a.select("ellipse").attr("ry", e.height);
        moveEllipsePoint(a)
    }
    function u(e) {
        var e = a.data()[0];
        e.height += d3.event.dy;
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        a.select("ellipse").attr("ry", e.height);
        moveEllipsePoint(a)
    }
}
function moveEllipsePoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.top").attr("x", t.x - 3).attr("y", t.y - t.height - 3);
        r.select("rect.right").attr("x", t.x + t.width - 3).attr("y", t.y - 3);
        r.select("rect.bottom").attr("x", t.x - 3).attr("y", t.y + t.height - 3);
        r.select("rect.left").attr("x", t.x - t.width - 3).attr("y", t.y - 3)
    }
}
function drawAllImagePoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawImagePoint(Math.round(r.x - 3), Math.round(r.y - 3), "left-top", e, t);
    drawImagePoint(Math.round(r.x + r.width / 2 - 3), Math.round(r.y - 3), "top", e, t);
    drawImagePoint(Math.round(r.x + r.width - 3), Math.round(r.y - 3), "right-top", e, t);
    drawImagePoint(Math.round(r.x + r.width - 3), Math.round(r.y + r.height / 2 - 3), "right", e, t);
    drawImagePoint(Math.round(r.x + r.width - 3), Math.round(r.y + r.height - 3), "right-bottom", e, t);
    drawImagePoint(Math.round(r.x + r.width / 2 - 3), Math.round(r.y + r.height - 3), "bottom", e, t);
    drawImagePoint(Math.round(r.x - 3), Math.round(r.y + r.height - 3), "left-bottom", e, t);
    drawImagePoint(Math.round(r.x - 3), Math.round(r.y + r.height / 2 - 3), "left", e, t)
}
function drawImagePoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l() {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("left-top" == t) {
            d()
        } else if ("top" == t) {
            c()
        } else if ("right-top" == t) {
            h()
        } else if ("right" == t) {
            u()
        } else if ("right-bottom" == t) {
            g()
        } else if ("bottom" == t) {
            p()
        } else if ("left-bottom" == t) {
            f()
        } else if ("left" == t) {
            y()
        }
        if (n)
            n()
    }
    function d() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        e.height -= d3.event.dy;
        if (e.width < 0) {
            e.width += d3.event.dx
        } else {
            e.x += d3.event.dx
        }
        if (e.height < 0) {
            e.height += d3.event.dy
        } else {
            e.y += d3.event.dy
        }
        moveImagePoint(a)
    }
    function c() {
        var e = a.data()[0];
        e.height -= d3.event.dy;
        if (e.height < 0) {
            e.height += d3.event.dy
        } else {
            e.y += d3.event.dy
        }
        moveImagePoint(a)
    }
    function h() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        e.height -= d3.event.dy;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        if (e.height < 0) {
            e.height += d3.event.dy
        } else {
            e.y += d3.event.dy
        }
        moveImagePoint(a)
    }
    function u() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        moveImagePoint(a)
    }
    function g() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        e.height += d3.event.dy;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        moveImagePoint(a)
    }
    function p() {
        var e = a.data()[0];
        e.height += d3.event.dy;
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        moveImagePoint(a)
    }
    function f() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        e.height += d3.event.dy;
        if (e.width < 0) {
            e.width += d3.event.dx
        } else {
            e.x += d3.event.dx
        }
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        moveImagePoint(a)
    }
    function y() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        if (e.width < 0) {
            e.width += d3.event.dx
        } else {
            e.x += d3.event.dx
        }
        moveImagePoint(a)
    }
}
function moveImagePoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.left-top").attr("x", t.x - 3).attr("y", t.y - 3);
        r.select("rect.top").attr("x", t.x + t.width / 2 - 3).attr("y", t.y - 3);
        r.select("rect.right-top").attr("x", t.x + t.width - 3).attr("y", t.y - 3);
        r.select("rect.right").attr("x", t.x + t.width - 3).attr("y", t.y + t.height / 2 - 3);
        r.select("rect.right-bottom").attr("x", t.x + t.width - 3).attr("y", t.y + t.height - 3);
        r.select("rect.bottom").attr("x", t.x + t.width / 2 - 3).attr("y", t.y + t.height - 3);
        r.select("rect.left-bottom").attr("x", t.x - 3).attr("y", t.y + t.height - 3);
        r.select("rect.left").attr("x", t.x - 3).attr("y", t.y + t.height / 2 - 3)
    }
}
function changeImagePointCursor(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        if (t.radius >= 23 && t.radius < 68 || t.radius >= 203 && t.radius < 248) {
            r.select("rect.left-top").style("cursor", "n-resize");
            r.select("rect.right-bottom").style("cursor", "n-resize");
            r.select("rect.top").style("cursor", "ne-resize");
            r.select("rect.bottom").style("cursor", "ne-resize");
            r.select("rect.right-top").style("cursor", "e-resize");
            r.select("rect.left-bottom").style("cursor", "e-resize");
            r.select("rect.right").style("cursor", "nw-resize");
            r.select("rect.left").style("cursor", "nw-resize")
        } else if (t.radius >= 68 && t.radius < 113 || t.radius >= 248 && t.radius < 293) {
            r.select("rect.left-top").style("cursor", "ne-resize");
            r.select("rect.right-bottom").style("cursor", "ne-resize");
            r.select("rect.top").style("cursor", "e-resize");
            r.select("rect.bottom").style("cursor", "e-resize");
            r.select("rect.right-top").style("cursor", "nw-resize");
            r.select("rect.left-bottom").style("cursor", "nw-resize");
            r.select("rect.right").style("cursor", "n-resize");
            r.select("rect.left").style("cursor", "n-resize")
        } else if (t.radius >= 113 && t.radius < 158 || t.radius >= 293 && t.radius < 338) {
            r.select("rect.left-top").style("cursor", "e-resize");
            r.select("rect.right-bottom").style("cursor", "e-resize");
            r.select("rect.top").style("cursor", "nw-resize");
            r.select("rect.bottom").style("cursor", "nw-resize");
            r.select("rect.right-top").style("cursor", "n-resize");
            r.select("rect.left-bottom").style("cursor", "n-resize");
            r.select("rect.right").style("cursor", "ne-resize");
            r.select("rect.left").style("cursor", "ne-resize")
        } else {
            r.select("rect.left-top").style("cursor", null);
            r.select("rect.right-bottom").style("cursor", null);
            r.select("rect.top").style("cursor", null);
            r.select("rect.bottom").style("cursor", null);
            r.select("rect.right-top").style("cursor", null);
            r.select("rect.left-bottom").style("cursor", null);
            r.select("rect.right").style("cursor", null);
            r.select("rect.left").style("cursor", null)
        }
    }
}
function SelectedPoint(e, t, r) {
    this.type = r;
    this.x = e;
    this.y = t
}
function moveSelectedPoint(e, t) {
    d3.selectAll("svg g.selected-rect rect").each(function(r) {
        r.x += e;
        r.y += t;
        d3.select(this).attr("x", r.x).attr("y", r.y)
    });
    if (e > 0 || t > 0) {
        bindBeforeunload()
    }
}
function drawAllLinePoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawLinePoint(Math.round(r.x - 3), Math.round(r.y - 3), "start", e, t);
    drawLinePoint(Math.round(r.width - 3), Math.round(r.height - 3), "end", e, t)
}
function drawLinePoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l() {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("start" == t) {
            d()
        } else if ("end" == t) {
            c()
        }
        if (n) {
            n()
        }
    }
    function d() {
        var e = a.data()[0];
        e.x += d3.event.dx;
        e.y += d3.event.dy;
        a.selectAll("line").attr("x1", e.x).attr("y1", e.y);
        moveLinePoint(a)
    }
    function c() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        e.height += d3.event.dy;
        a.selectAll("line").attr("x2", e.width).attr("y2", e.height);
        moveLinePoint(a)
    }
}
function moveLinePoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.start").attr("x", t.x - 3).attr("y", t.y - 3);
        r.select("rect.end").attr("x", t.width - 3).attr("y", t.height - 3)
    }
}
function drawAllRectPoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawRectPoint(Math.round(r.x - 3), Math.round(r.y - 3), "left-top", e, t);
    drawRectPoint(Math.round(r.x + r.width / 2 - 3), Math.round(r.y - 3), "top", e, t);
    drawRectPoint(Math.round(r.x + r.width - 3), Math.round(r.y - 3), "right-top", e, t);
    drawRectPoint(Math.round(r.x + r.width - 3), Math.round(r.y + r.height / 2 - 3), "right", e, t);
    drawRectPoint(Math.round(r.x + r.width - 3), Math.round(r.y + r.height - 3), "right-bottom", e, t);
    drawRectPoint(Math.round(r.x + r.width / 2 - 3), Math.round(r.y + r.height - 3), "bottom", e, t);
    drawRectPoint(Math.round(r.x - 3), Math.round(r.y + r.height - 3), "left-bottom", e, t);
    drawRectPoint(Math.round(r.x - 3), Math.round(r.y + r.height / 2 - 3), "left", e, t)
}
function drawRectPoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l() {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("left-top" == t) {
            d()
        } else if ("top" == t) {
            c()
        } else if ("right-top" == t) {
            h()
        } else if ("right" == t) {
            u()
        } else if ("right-bottom" == t) {
            g()
        } else if ("bottom" == t) {
            p()
        } else if ("left-bottom" == t) {
            f()
        } else if ("left" == t) {
            y()
        }
        if (n)
            n()
    }
    function d() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        e.height -= d3.event.dy;
        if (e.width < 0) {
            e.width += d3.event.dx
        } else {
            e.x += d3.event.dx
        }
        if (e.height < 0) {
            e.height += d3.event.dy
        } else {
            e.y += d3.event.dy
        }
        a.select("rect").attr("x", e.x).attr("y", e.y).attr("width", e.width).attr("height", e.height);
        moveRectPoint(a)
    }
    function c() {
        var e = a.data()[0];
        e.height -= d3.event.dy;
        if (e.height < 0) {
            e.height += d3.event.dy
        } else {
            e.y += d3.event.dy
        }
        a.select("rect").attr("y", e.y).attr("height", e.height);
        moveRectPoint(a)
    }
    function h() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        e.height -= d3.event.dy;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        if (e.height < 0) {
            e.height += d3.event.dy
        } else {
            e.y += d3.event.dy
        }
        a.select("rect").attr("y", e.y).attr("width", e.width).attr("height", e.height);
        moveRectPoint(a)
    }
    function u() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        a.select("rect").attr("width", e.width);
        moveRectPoint(a)
    }
    function g() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        e.height += d3.event.dy;
        if (e.width < 0) {
            e.width -= d3.event.dx
        }
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        a.select("rect").attr("width", e.width).attr("height", e.height);
        moveRectPoint(a)
    }
    function p() {
        var e = a.data()[0];
        e.height += d3.event.dy;
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        a.select("rect").attr("height", e.height);
        moveRectPoint(a)
    }
    function f() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        e.height += d3.event.dy;
        if (e.width < 0) {
            e.width += d3.event.dx
        } else {
            e.x += d3.event.dx
        }
        if (e.height < 0) {
            e.height -= d3.event.dy
        }
        a.select("rect").attr("x", e.x).attr("y", e.y).attr("width", e.width).attr("height", e.height);
        moveRectPoint(a)
    }
    function y() {
        var e = a.data()[0];
        e.width -= d3.event.dx;
        if (e.width < 0) {
            e.width += d3.event.dx
        } else {
            e.x += d3.event.dx
        }
        a.select("rect").attr("x", e.x).attr("width", e.width);
        moveRectPoint(a)
    }
}
function moveRectPoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.left-top").attr("x", t.x - 3).attr("y", t.y - 3);
        r.select("rect.top").attr("x", t.x + t.width / 2 - 3).attr("y", t.y - 3);
        r.select("rect.right-top").attr("x", t.x + t.width - 3).attr("y", t.y - 3);
        r.select("rect.right").attr("x", t.x + t.width - 3).attr("y", t.y + t.height / 2 - 3);
        r.select("rect.right-bottom").attr("x", t.x + t.width - 3).attr("y", t.y + t.height - 3);
        r.select("rect.bottom").attr("x", t.x + t.width / 2 - 3).attr("y", t.y + t.height - 3);
        r.select("rect.left-bottom").attr("x", t.x - 3).attr("y", t.y + t.height - 3);
        r.select("rect.left").attr("x", t.x - 3).attr("y", t.y + t.height / 2 - 3)
    }
}
function drawAllTrianglePoint(e, t) {
    e.append("g").classed("selected-rect", true).on("click", function() {
        d3.event.stopPropagation()
    });
    var r = e.data()[0];
    drawTrianglePoint(r.x - 3, r.y - 3, "point1", e, t);
    drawTrianglePoint(r.x2 - 3, r.y2 - 3, "point2", e, t);
    drawTrianglePoint(r.width - 3, r.height - 3, "point3", e, t)
}
function drawTrianglePoint(e, t, r, a, n) {
    var i = d3.behavior.drag().on("dragstart", l).on("drag", s).on("dragend", o);
    a.select("g.selected-rect").append("rect").classed(r, true).attr("x", e).attr("y", t).attr("width", 6).attr("height", 6).call(i);
    function l() {
        undoArray.push({
            oper: "move",
            status: false,
            datas: [$.extend({}, a.data()[0])]
        });
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.event.sourceEvent.stopPropagation()
    }
    function o() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray[undoArray.length - 1];
            if (e.oper == "move") {
                if (!e.status) {
                    undoArray.pop()
                } else {
                    redoArray.splice(0, redoArray.length);
                    $("#btnEleRedo").addClass("disabled");
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
        }
    }
    function s() {
        if (!a.classed("active") || a.classed("lock")) {
            return
        }
        if (d3.event.dx >= 1 || d3.event.dx <= -1 || d3.event.dy >= 1 || d3.event.dy <= -1) {
            if (undoArray && undoArray.length > 0) {
                var e = undoArray[undoArray.length - 1];
                if (e.oper == "move") {
                    e.status = true
                }
            }
        }
        var t = d3.select(this).attr("class");
        if ("point1" == t) {
            d()
        } else if ("point2" == t) {
            c()
        } else if ("point3" == t) {
            h()
        }
        if (n) {
            n()
        }
    }
    function d() {
        var e = a.data()[0];
        e.x += d3.event.dx;
        e.y += d3.event.dy;
        a.select("polygon").attr("points", e.x + "," + e.y + " " + e.x2 + "," + e.y2 + " " + e.width + "," + e.height);
        moveTrianglePoint(a)
    }
    function c() {
        var e = a.data()[0];
        e.x2 += d3.event.dx;
        e.y2 += d3.event.dy;
        a.select("polygon").attr("points", e.x + "," + e.y + " " + e.x2 + "," + e.y2 + " " + e.width + "," + e.height);
        moveTrianglePoint(a)
    }
    function h() {
        var e = a.data()[0];
        e.width += d3.event.dx;
        e.height += d3.event.dy;
        a.select("polygon").attr("points", e.x + "," + e.y + " " + e.x2 + "," + e.y2 + " " + e.width + "," + e.height);
        moveTrianglePoint(a)
    }
}
function moveTrianglePoint(e) {
    var t = e.data()[0];
    if (t) {
        var r = e.select("g.selected-rect");
        r.select("rect.point1").attr("x", t.x - 3).attr("y", t.y - 3);
        r.select("rect.point2").attr("x", t.x2 - 3).attr("y", t.y2 - 3);
        r.select("rect.point3").attr("x", t.width - 3).attr("y", t.height - 3)
    }
}
$(function() {
    $("#btnEleAlignLeft, #menuEleAlignLeft").click(function() {
        saveAlignUndo();
        leftAlign()
    });
    $("#btnEleAlignRight, #menuEleAlignRight").click(function() {
        saveAlignUndo();
        rightAlign()
    });
    $("#btnEleAlignUp, #menuEleAlignTop").click(function() {
        saveAlignUndo();
        upAlign()
    });
    $("#btnEleAlignDown, #menuEleAlignBottom").click(function() {
        saveAlignUndo();
        downAlign()
    });
    $("#btnEleAlignVCenter, #menuEleAlignVCenter").click(function() {
        saveAlignUndo();
        centerVAlign()
    });
    $("#btnEleAlignHCenter, #menuEleAlignHCenter").click(function() {
        saveAlignUndo();
        centerHAlign()
    })
});
function saveAlignUndo() {
    var e = [];
    d3.selectAll("svg > g.select,svg > g.active").each(function(t) {
        e.push($.extend({}, t))
    });
    undoArray.push({
        oper: "move",
        status: true,
        datas: e
    });
    if (undoArray && undoArray.length > 10) {
        undoArray.splice(0, undoArray.length - 10)
    }
    redoArray.splice(0, redoArray.length);
    $("#btnEleRedo").addClass("disabled");
    $("#btnEleUndo").removeClass("disabled")
}
function leftAlign() {
    var e = 1e5;
    d3.selectAll("svg > g.select, svg > g.active").each(t);
    function t(t) {
        var r = t.x;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.width < t.x) {
                r = t.width
            }
        } else if (t.type == "triangle") {
            if (t.x2 < t.x && t.x2 <= t.width) {
                r = t.x2
            } else if (t.width < t.x && t.width <= t.x2) {
                r = t.width
            }
        } else if (t.type == "lightCircle" || t.type == "circle" || t.type == "ellipse" || t.type == "dashboard") {
            r = t.x - t.width
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = (t.x - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2
            } else if (t.radius >= 90 && t.radius < 180) {
                r = (t.x + t.width - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2
            } else if (t.radius >= 180 && t.radius < 270) {
                r = (t.x + t.width - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2
            } else {
                r = (t.x - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2
            }
        }
        if (r < e) {
            e = r
        }
    }
    d3.selectAll("svg > g.select, svg > g.active").each(r);
    function r(t) {
        if (t.posLock) {
            return
        }
        var r = e - t.x;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.width < t.x) {
                r = e - t.width
            }
            t.x += r;
            t.width += r;
            d3.select(this).selectAll("line").attr("x1", function(e) {
                return e.x
            }).attr("x2", function(e) {
                return e.width
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        } else if (t.type == "rect" || t.type == "dataText" || t.type == "lightRect" || t.type == "text" || t.type == "controlText" || t.type == "controlTextFixed" || t.type == "timer" || t.type == "linkText" || t.type == "openPageText") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).select("text").style("text-anchor", function(e) {
                return e.trueAlter
            });
            d3.select(this).select("text").attr("x", function(e) {
                if ("start" == e.trueAlter) {
                    return e.x
                } else if ("end" == e.trueAlter) {
                    return Math.round(e.x + e.width)
                } else {
                    return Math.round(e.x + e.width / 2)
                }
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "ellipse") {
            r = e - t.x + t.width;
            t.x += r;
            d3.select(this).select("ellipse").attr("cx", function(e) {
                return e.x
            });
            moveEllipsePoint(d3.select(this))
        } else if (t.type == "triangle") {
            if (t.x2 < t.x && t.x2 <= t.width) {
                r = e - t.x2
            } else if (t.width < t.x && t.width <= t.x2) {
                r = e - t.width
            }
            t.x += r;
            t.x2 += r;
            t.width += r;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return t.x + "," + t.y + " " + t.x2 + "," + t.y2 + " " + t.width + "," + t.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (t.type == "lightCircle" || t.type == "circle") {
            r = e - t.x + t.width;
            t.x += r;
            d3.select(this).select("circle").attr("cx", function(e) {
                return e.x
            });
            d3.select(this).select("text").attr("x", function(e) {
                return e.x
            });
            moveCirclePoint(d3.select(this))
        } else if (t.type == "fillHRect") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2 + 5)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "fillVRect") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "dashboard") {
            r = e - t.x + t.width;
            t.x += r;
            d3.select(this).attr("transform", "translate(" + t.x + "," + t.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = e - ((t.x - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2)
            } else if (t.radius >= 90 && t.radius < 180) {
                r = e - ((t.x + t.width - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2)
            } else if (t.radius >= 180 && t.radius < 270) {
                r = e - ((t.x + t.width - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2)
            } else {
                r = e - ((t.x - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2)
            }
            t.x += r;
            t.x2 += r;
            d3.select(this).select("image").attr("x", t.x);
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (t.type == "controlImage" || t.type == "controlImageFixed" || t.type == "linkImage" || t.type == "openPageImage" || t.type == "video") {
            t.x += r;
            t.x2 += r;
            d3.select(this).select("image").attr("x", t.x);
            moveImagePoint(d3.select(this))
        } else if (t.type == "lineChart") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).select("svg").attr("x", function(e) {
                return e.x
            });
            moveRectPoint(d3.select(this))
        }
    }
    resetForm()
}
function rightAlign() {
    var e = -1e5;
    d3.selectAll("svg > g.select, svg > g.active").each(t);
    function t(t) {
        var r = t.x + t.width;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.width > t.x) {
                r = t.width
            } else {
                r = t.x
            }
        } else if (t.type == "triangle") {
            if (t.x2 > t.x && t.x2 >= t.width) {
                r = t.x2
            } else if (t.width > t.x && t.width >= t.x2) {
                r = t.width
            } else {
                r = t.x
            }
        } else if (t.type == "lightCircle" || t.type == "circle" || t.type == "ellipse" || t.type == "dashboard") {
            r = t.x + t.width
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = (t.x + t.width - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2
            } else if (t.radius >= 90 && t.radius < 180) {
                r = (t.x - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2
            } else if (t.radius >= 180 && t.radius < 270) {
                r = (t.x - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2
            } else {
                r = (t.x + t.width - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2
            }
        }
        if (r > e) {
            e = r
        }
    }
    d3.selectAll("svg > g.select, svg > g.active").each(r);
    function r(t) {
        if (t.posLock) {
            return
        }
        var r = e - t.x - t.width;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.width > t.x) {
                r = e - t.width
            } else {
                r = e - t.x
            }
            t.x += r;
            t.width += r;
            d3.select(this).selectAll("line").attr("x1", function(e) {
                return e.x
            }).attr("x2", function(e) {
                return e.width
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        } else if (t.type == "rect" || t.type == "dataText" || t.type == "lightRect" || t.type == "text" || t.type == "controlText" || t.type == "controlTextFixed" || t.type == "timer" || t.type == "linkText" || t.type == "openPageText") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).select("text").style("text-anchor", function(e) {
                return e.trueAlter
            });
            d3.select(this).select("text").attr("x", function(e) {
                if ("start" == e.trueAlter) {
                    return e.x
                } else if ("end" == e.trueAlter) {
                    return Math.round(e.x + e.width)
                } else {
                    return Math.round(e.x + e.width / 2)
                }
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "ellipse") {
            t.x += r;
            d3.select(this).select("ellipse").attr("cx", function(e) {
                return e.x
            });
            moveEllipsePoint(d3.select(this))
        } else if (t.type == "triangle") {
            if (t.x2 > t.x && t.x2 >= t.width) {
                r = e - t.x2
            } else if (t.width > t.x && t.width >= t.x2) {
                r = e - t.width
            } else {
                r = e - t.x
            }
            t.x += r;
            t.x2 += r;
            t.width += r;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return t.x + "," + t.y + " " + t.x2 + "," + t.y2 + " " + t.width + "," + t.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (t.type == "lightCircle" || t.type == "circle") {
            t.x += r;
            d3.select(this).select("circle").attr("cx", function(e) {
                return e.x
            });
            d3.select(this).select("text").attr("x", function(e) {
                return e.x
            });
            moveCirclePoint(d3.select(this))
        } else if (t.type == "fillHRect") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2 + 5)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "fillVRect") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "dashboard") {
            t.x += r;
            d3.select(this).attr("transform", "translate(" + t.x + "," + t.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = e - ((t.x + t.width - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2)
            } else if (t.radius >= 90 && t.radius < 180) {
                r = e - ((t.x - t.x2) * Math.cos(a) - (t.y - t.y2) * Math.sin(a) + t.x2)
            } else if (t.radius >= 180 && t.radius < 270) {
                r = e - ((t.x - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2)
            } else {
                r = e - ((t.x + t.width - t.x2) * Math.cos(a) - (t.y + t.height - t.y2) * Math.sin(a) + t.x2)
            }
            t.x += r;
            t.x2 += r;
            d3.select(this).select("image").attr("x", t.x);
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (t.type == "controlImage" || t.type == "controlImageFixed" || t.type == "linkImage" || t.type == "openPageImage" || t.type == "video") {
            t.x += r;
            t.x2 += r;
            d3.select(this).select("image").attr("x", t.x);
            moveImagePoint(d3.select(this))
        } else if (t.type == "lineChart") {
            t.x += r;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).select("svg").attr("x", function(e) {
                return e.x
            });
            moveRectPoint(d3.select(this))
        }
    }
    resetForm()
}
function upAlign() {
    var e = 1e5;
    d3.selectAll("svg > g.select, svg > g.active").each(t);
    function t(t) {
        var r = t.y;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.height < t.y) {
                r = t.height
            }
        } else if (t.type == "triangle") {
            if (t.y2 < t.y && t.y2 <= t.height) {
                r = t.y2
            } else if (t.height < t.y && t.height <= t.y2) {
                r = t.height
            }
        } else if (t.type == "lightCircle" || t.type == "circle" || t.type == "dashboard") {
            r = t.y - t.width
        } else if (t.type == "ellipse") {
            r = t.y - t.height
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = (t.x - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2
            } else if (t.radius >= 90 && t.radius < 180) {
                r = (t.x - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2
            } else if (t.radius >= 180 && t.radius < 270) {
                r = (t.x + t.width - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2
            } else {
                r = (t.x + t.width - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2
            }
        }
        if (r < e) {
            e = r
        }
    }
    d3.selectAll("svg > g.select, svg > g.active").each(r);
    function r(t) {
        if (t.posLock) {
            return
        }
        var r = e - t.y;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.height < t.y) {
                r = e - t.height
            }
            t.y += r;
            t.height += r;
            d3.select(this).selectAll("line").attr("y1", function(e) {
                return e.y
            }).attr("y2", function(e) {
                return e.height
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        } else if (t.type == "rect" || t.type == "dataText" || t.type == "lightRect" || t.type == "text" || t.type == "controlText" || t.type == "controlTextFixed" || t.type == "timer" || t.type == "linkText" || t.type == "openPageText") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "ellipse") {
            r = e - t.y + t.height;
            t.y += r;
            d3.select(this).select("ellipse").attr("cy", function(e) {
                return e.y
            });
            moveEllipsePoint(d3.select(this))
        } else if (t.type == "triangle") {
            if (t.y2 < t.y && t.y2 <= t.height) {
                r = e - t.y2
            } else if (t.height < t.y && t.height <= t.y2) {
                r = e - t.height
            }
            t.y += r;
            t.y2 += r;
            t.height += r;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return t.x + "," + t.y + " " + t.x2 + "," + t.y2 + " " + t.width + "," + t.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (t.type == "lightCircle" || t.type == "circle") {
            r = e - t.y + t.width;
            t.y += r;
            d3.select(this).select("circle").attr("cy", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("y", function(e) {
                return e.y
            });
            moveCirclePoint(d3.select(this))
        } else if (t.type == "fillHRect") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "fillVRect") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2 - 10)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "dashboard") {
            r = e - t.y + t.width;
            t.y += r;
            d3.select(this).attr("transform", "translate(" + t.x + "," + t.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = e - ((t.x - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2)
            } else if (t.radius >= 90 && t.radius < 180) {
                r = e - ((t.x - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2)
            } else if (t.radius >= 180 && t.radius < 270) {
                r = e - ((t.x + t.width - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2)
            } else {
                r = e - ((t.x + t.width - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2)
            }
            t.y += r;
            t.y2 += r;
            d3.select(this).select("image").attr("y", t.y);
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (t.type == "controlImage" || t.type == "controlImageFixed" || t.type == "linkImage" || t.type == "openPageImage" || t.type == "video") {
            t.y += r;
            t.y2 += r;
            d3.select(this).select("image").attr("y", t.y);
            moveImagePoint(d3.select(this))
        } else if (t.type == "lineChart") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("svg").attr("y", function(e) {
                return e.y
            });
            moveRectPoint(d3.select(this))
        }
    }
    resetForm()
}
function downAlign() {
    var e = -1e5;
    d3.selectAll("svg > g.select, svg > g.active").each(t);
    function t(t) {
        var r = t.y + t.height;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.height > t.y) {
                r = t.height
            } else {
                r = t.y
            }
        } else if (t.type == "triangle") {
            if (t.y2 > t.y && t.y2 >= t.height) {
                r = t.y2
            } else if (t.height > t.y && t.height >= t.y2) {
                r = t.height
            } else {
                r = t.y
            }
        } else if (t.type == "lightCircle" || t.type == "circle" || t.type == "dashboard") {
            r = t.y + t.width
        } else if (t.type == "ellipse") {
            r = t.y + t.height
        } else if (t.type == "image" || t.type == "lightImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = (t.x + t.width - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2
            } else if (t.radius >= 90 && t.radius < 180) {
                r = (t.x + t.width - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2
            } else if (t.radius >= 180 && t.radius < 270) {
                r = (t.x - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2
            } else {
                r = (t.x - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2
            }
        }
        if (r > e) {
            e = r
        }
    }
    d3.selectAll("svg > g.select, svg > g.active").each(r);
    function r(t) {
        if (t.posLock) {
            return
        }
        var r = e - t.y - t.height;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.height > t.y) {
                r = e - t.height
            } else {
                r = e - t.y
            }
            t.y += r;
            t.height += r;
            d3.select(this).selectAll("line").attr("y1", function(e) {
                return e.y
            }).attr("y2", function(e) {
                return e.height
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        } else if (t.type == "rect" || t.type == "dataText" || t.type == "lightRect" || t.type == "text" || t.type == "controlText" || t.type == "controlTextFixed" || t.type == "timer" || t.type == "linkText" || t.type == "openPageText") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "ellipse") {
            t.y += r;
            d3.select(this).select("ellipse").attr("cy", function(e) {
                return e.y
            });
            moveEllipsePoint(d3.select(this))
        } else if (t.type == "triangle") {
            if (t.y2 > t.y && t.y2 >= t.height) {
                r = e - t.y2
            } else if (t.height > t.y && t.height >= t.y2) {
                r = e - t.height
            } else {
                r = e - t.y
            }
            t.y += r;
            t.y2 += r;
            t.height += r;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return t.x + "," + t.y + " " + t.x2 + "," + t.y2 + " " + t.width + "," + t.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (t.type == "lightCircle" || t.type == "circle") {
            r = e - t.y - t.width;
            t.y += r;
            d3.select(this).select("circle").attr("cy", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("y", function(e) {
                return e.y
            });
            moveCirclePoint(d3.select(this))
        } else if (t.type == "fillHRect") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "fillVRect") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2 - 10)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "dashboard") {
            r = e - t.y - t.width;
            t.y += r;
            d3.select(this).attr("transform", "translate(" + t.x + "," + t.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (t.type == "image" || t.type == "lightImage" || t.type == "linkImage") {
            var a = 2 * Math.PI / 360 * t.radius;
            if (t.radius >= 0 && t.radius < 90) {
                r = e - ((t.x + t.width - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2)
            } else if (t.radius >= 90 && t.radius < 180) {
                r = e - ((t.x + t.width - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2)
            } else if (t.radius >= 180 && t.radius < 270) {
                r = e - ((t.x - t.x2) * Math.sin(a) + (t.y - t.y2) * Math.cos(a) + t.y2)
            } else {
                r = e - ((t.x - t.x2) * Math.sin(a) + (t.y + t.height - t.y2) * Math.cos(a) + t.y2)
            }
            t.y += r;
            t.y2 += r;
            d3.select(this).select("image").attr("y", t.y);
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (t.type == "controlImage" || t.type == "controlImageFixed" || t.type == "linkImage" || t.type == "openPageImage" || t.type == "video") {
            t.y += r;
            t.y2 += r;
            d3.select(this).select("image").attr("y", t.y);
            moveImagePoint(d3.select(this))
        } else if (t.type == "lineChart") {
            t.y += r;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("svg").attr("y", function(e) {
                return e.y
            });
            moveRectPoint(d3.select(this))
        }
    }
    resetForm()
}
function centerVAlign() {
    var e = 0;
    d3.select("svg > g.select, svg > g.active").each(t);
    function t(t, r) {
        if (r != 0) {
            return
        }
        var a = 0;
        a = t.x + t.width / 2;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.width < t.x) {
                a = t.width + (t.x - t.width) / 2
            } else {
                a = t.x + (t.width - t.x) / 2
            }
        } else if (t.type == "triangle") {
            var n = 0;
            var i = 0;
            i = t.x >= t.x2 ? t.x : t.x2;
            i = i >= t.width ? i : t.width;
            n = t.x <= t.x2 ? t.x : t.x2;
            n = n <= t.width ? n : t.width;
            a = n + (i - n) / 2
        } else if (t.type == "lightCircle" || t.type == "circle" || t.type == "ellipse" || t.type == "dashboard") {
            a = t.x
        }
        e = a
    }
    d3.selectAll("svg > g.select, svg > g.active").each(r);
    function r(t, r) {
        if (t.posLock || r == 0) {
            return
        }
        var a = 0;
        if (t.x + t.width / 2 >= e) {
            a = -(t.x + t.width / 2 - e)
        } else {
            a = e - (t.x + t.width / 2)
        }
        if (t.type == "line" || t.type == "scrollbar") {
            var n = 0;
            if (t.width < t.x) {
                n = t.width + (t.x - t.width) / 2
            } else {
                n = t.x + (t.width - t.x) / 2
            }
            if (n >= e) {
                a = -(n - e)
            } else {
                a = e - n
            }
            t.x += a;
            t.width += a;
            d3.select(this).selectAll("line").attr("x1", function(e) {
                return e.x
            }).attr("x2", function(e) {
                return e.width
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        } else if (t.type == "rect" || t.type == "dataText" || t.type == "lightRect" || t.type == "text" || t.type == "controlText" || t.type == "controlTextFixed" || t.type == "timer" || t.type == "linkText" || t.type == "openPageText") {
            t.x += a;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).select("text").style("text-anchor", function(e) {
                return e.trueAlter
            });
            d3.select(this).select("text").attr("x", function(e) {
                if ("start" == e.trueAlter) {
                    return e.x
                } else if ("end" == e.trueAlter) {
                    return Math.round(e.x + e.width)
                } else {
                    return Math.round(e.x + e.width / 2)
                }
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "ellipse") {
            if (t.x >= e) {
                a = -(t.x - e)
            } else {
                a = e - t.x
            }
            t.x += a;
            d3.select(this).select("ellipse").attr("cx", function(e) {
                return e.x
            });
            moveEllipsePoint(d3.select(this))
        } else if (t.type == "triangle") {
            var i = 0;
            var l = 0;
            l = t.x >= t.x2 ? t.x : t.x2;
            l = l >= t.width ? l : t.width;
            i = t.x <= t.x2 ? t.x : t.x2;
            i = i <= t.width ? i : t.width;
            var o = i + (l - i) / 2;
            if (o >= e) {
                a = -(o - e)
            } else {
                a = e - o
            }
            t.x += a;
            t.x2 += a;
            t.width += a;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return t.x + "," + t.y + " " + t.x2 + "," + t.y2 + " " + t.width + "," + t.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (t.type == "lightCircle" || t.type == "circle") {
            if (t.x >= e) {
                a = -(t.x - e)
            } else {
                a = e - t.x
            }
            t.x += a;
            d3.select(this).select("circle").attr("cx", function(e) {
                return e.x
            });
            d3.select(this).select("text").attr("x", function(e) {
                return e.x
            });
            moveCirclePoint(d3.select(this))
        } else if (t.type == "fillHRect") {
            t.x += a;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2 + 5)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "fillVRect") {
            t.x += a;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("x", function(e) {
                return Math.round(e.x + e.width / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "dashboard") {
            if (t.x >= e) {
                a = -(t.x - e)
            } else {
                a = e - t.x
            }
            t.x += a;
            d3.select(this).attr("transform", "translate(" + t.x + "," + t.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (t.type == "image" || t.type == "lightImage") {
            t.x += a;
            t.x2 += a;
            d3.select(this).select("image").attr("x", t.x);
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (t.type == "controlImage" || t.type == "controlImageFixed" || t.type == "linkImage" || t.type == "openPageImage" || t.type == "video") {
            t.x += a;
            t.x2 += a;
            d3.select(this).select("image").attr("x", t.x);
            moveImagePoint(d3.select(this))
        } else if (t.type == "lineChart") {
            t.x += a;
            d3.select(this).select("rect").attr("x", function(e) {
                return e.x
            });
            d3.select(this).select("svg").attr("x", function(e) {
                return e.x
            });
            moveRectPoint(d3.select(this))
        }
    }
    resetForm()
}
function centerHAlign() {
    var e = 0;
    d3.select("svg > g.select, svg > g.active").each(t);
    function t(t, r) {
        if (r != 0) {
            return
        }
        var a = 0;
        a = t.y + t.height / 2;
        if (t.type == "line" || t.type == "scrollbar") {
            if (t.height < t.y) {
                a = t.height + (t.y - t.height) / 2
            } else {
                a = t.y + (t.height - t.y) / 2
            }
        } else if (t.type == "triangle") {
            var n = 0;
            var i = 0;
            i = t.y >= t.y2 ? t.y : t.y2;
            i = i >= t.height ? i : t.height;
            n = t.y <= t.y2 ? t.y : t.y2;
            n = n <= t.height ? n : t.height;
            a = n + (i - n) / 2
        } else if (t.type == "lightCircle" || t.type == "circle" || t.type == "dashboard" || t.type == "ellipse") {
            a = t.y
        }
        e = a
    }
    d3.selectAll("svg > g.select, svg > g.active").each(r);
    function r(t, r) {
        if (t.posLock || r == 0) {
            return
        }
        var a = 0;
        if (t.y + t.height / 2 >= e) {
            a = -(t.y + t.height / 2 - e)
        } else {
            a = e - (t.y + t.height / 2)
        }
        if (t.type == "line" || t.type == "scrollbar") {
            var n = 0;
            if (t.height < t.y) {
                n = t.height + (t.y - t.height) / 2
            } else {
                n = t.y + (t.height - t.y) / 2
            }
            if (n >= e) {
                a = -(n - e)
            } else {
                a = e - n
            }
            t.y += a;
            t.height += a;
            d3.select(this).selectAll("line").attr("y1", function(e) {
                return e.y
            }).attr("y2", function(e) {
                return e.height
            });
            d3.select(this).select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
            moveLinePoint(d3.select(this))
        } else if (t.type == "rect" || t.type == "dataText" || t.type == "lightRect" || t.type == "text" || t.type == "controlText" || t.type == "controlTextFixed" || t.type == "timer" || t.type == "linkText" || t.type == "openPageText") {
            t.y += a;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "ellipse") {
            if (t.y >= e) {
                a = -(t.y - e)
            } else {
                a = e - t.y
            }
            t.y += a;
            d3.select(this).select("ellipse").attr("cy", function(e) {
                return e.y
            });
            moveEllipsePoint(d3.select(this))
        } else if (t.type == "triangle") {
            var i = 0;
            var l = 0;
            l = t.y >= t.x2 ? t.y : t.y2;
            l = l >= t.height ? l : t.height;
            i = t.y <= t.y2 ? t.y : t.y2;
            i = i <= t.height ? i : t.height;
            var o = i + (l - i) / 2;
            if (o >= e) {
                a = -(o - e)
            } else {
                a = e - o
            }
            t.y += a;
            t.y2 += a;
            t.height += a;
            d3.select(this).select("polygon.shape-triangle").attr("points", function() {
                return t.x + "," + t.y + " " + t.x2 + "," + t.y2 + " " + t.width + "," + t.height
            });
            moveTrianglePoint(d3.select(this))
        } else if (t.type == "lightCircle" || t.type == "circle") {
            if (t.y >= e) {
                a = -(t.y - e)
            } else {
                a = e - t.y
            }
            t.y += a;
            d3.select(this).select("circle").attr("cy", function(e) {
                return e.y
            });
            d3.select(this).select("text").attr("y", function(e) {
                return e.y
            });
            moveCirclePoint(d3.select(this))
        } else if (t.type == "fillHRect") {
            t.y += a;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "fillVRect") {
            t.y += a;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).selectAll("polygon").attr("points", function(e) {
                return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
            });
            d3.select(this).select("text").attr("y", function(e) {
                return Math.round(e.y + e.height / 2 - 10)
            });
            moveRectPoint(d3.select(this))
        } else if (t.type == "dashboard") {
            if (t.y >= e) {
                a = -(t.y - e)
            } else {
                a = e - t.y
            }
            t.y += a;
            d3.select(this).attr("transform", "translate(" + t.x + "," + t.y + ")");
            moveDashBoardPoint(d3.select(this))
        } else if (t.type == "image" || t.type == "lightImage") {
            t.y += a;
            t.y2 += a;
            d3.select(this).select("image").attr("y", t.y);
            d3.select(this).attr("transform", function(e) {
                return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
            });
            moveImagePoint(d3.select(this))
        } else if (t.type == "controlImage" || t.type == "controlImageFixed" || t.type == "linkImage" || t.type == "openPageImage" || t.type == "video") {
            t.y += a;
            t.y2 += a;
            d3.select(this).select("image").attr("y", t.y);
            moveImagePoint(d3.select(this))
        } else if (t.type == "lineChart") {
            t.y += a;
            d3.select(this).select("rect").attr("y", function(e) {
                return e.y
            });
            d3.select(this).select("svg").attr("y", function(e) {
                return e.y
            });
            moveRectPoint(d3.select(this))
        }
    }
    resetForm()
}
function addElement(e, t) {
    var r = new FormData;
    r.append("ele.ruleId", $("#ruleId").val());
    r.append("ele.conId", $("#conId").val());
    r.append("ele.type", e.type);
    r.append("ele.x", Math.round(e.x));
    r.append("ele.y", Math.round(e.y));
    r.append("ele.x2", Math.round(e.x2));
    r.append("ele.y2", Math.round(e.y2));
    r.append("ele.width", Math.round(e.width));
    r.append("ele.height", Math.round(e.height));
    r.append("ele.radius", Math.round(e.radius));
    r.append("ele.padding", Math.round(e.padding));
    r.append("ele.fill", e.fill);
    r.append("ele.stroke", e.stroke);
    r.append("ele.strokeWidth", e.strokeWidth);
    r.append("ele.strokeDasharray", e.strokeDasharray);
    r.append("ele.strokeLinecap", e.strokeLinecap);
    r.append("ele.fontFamily", e.fontFamily);
    r.append("ele.fontSize", e.fontSize);
    r.append("ele.fontWeight", e.fontWeight);
    r.append("ele.color", e.color);
    r.append("ele.content", e.content);
    r.append("ele.showBg", e.showBg);
    r.append("ele.trueAlter", e.trueAlter);
    r.append("ele.falseAlter", e.falseAlter);
    r.append("ele.seq", e.seq);
    r.append("ele.posLock", e.posLock);
    
    // $.ajax({
    //     url: "DesignerElementAction!add.action",
    //     data: r,
    //     type: "POST",
    //     dataType: "json",
    //     processData: false,
    //     contentType: false,
    //     success: function(r) {
        var addResult = {"result":true,"id":438604};
            if (addResult.result) {
                e.id = addResult.id;
                d3.select("svg g.active").attr("id", "ele_" + e.id);
                t(e);
                $(".left-menu ul li div.active").removeClass("active");
                $("#btnEleSelect").addClass("active");
                $("svg.designer-container").css("cursor", "default");
                registerSelect();
                undoArray.push({
                    oper: "add",
                    datas: [e]
                });
                if (undoArray && undoArray.length > 0) {
                    var a = undoArray[undoArray.length - 1];
                    if (a.oper == "add") {
                        redoArray.splice(0, redoArray.length);
                        $("#btnEleRedo").addClass("disabled");
                        $("#btnEleUndo").removeClass("disabled")
                    }
                    if (undoArray.length > 10) {
                        undoArray.splice(0, undoArray.length - 10)
                    }
                }
            } else {
                d3.select("svg g.active").remove()
            }
    //     },
    //     error: function(e) {
    //         d3.select("svg g.active").remove()
    //     }
    // })
}
function copyElement(e, t) {
    var r = e.data()[0];
    var a = new FormData;
    a.append("ele.ruleId", $("#ruleId").val());
    a.append("ele.conId", $("#conId").val());
    a.append("ele.type", r.type);
    a.append("ele.x", Math.round(r.x));
    a.append("ele.y", Math.round(r.y));
    a.append("ele.x2", Math.round(r.x2));
    a.append("ele.y2", Math.round(r.y2));
    a.append("ele.width", Math.round(r.width));
    a.append("ele.height", Math.round(r.height));
    a.append("ele.radius", Math.round(r.radius));
    a.append("ele.padding", Math.round(r.padding));
    a.append("ele.fill", r.fill);
    a.append("ele.stroke", r.stroke);
    a.append("ele.strokeWidth", r.strokeWidth);
    a.append("ele.strokeDasharray", r.strokeDasharray);
    a.append("ele.strokeLinecap", r.strokeLinecap);
    a.append("ele.fontFamily", r.fontFamily);
    a.append("ele.fontSize", r.fontSize);
    a.append("ele.fontWeight", r.fontWeight);
    a.append("ele.color", r.color);
    a.append("ele.content", r.content);
    a.append("ele.showBg", r.showBg);
    a.append("ele.trueAlter", r.trueAlter);
    a.append("ele.falseAlter", r.falseAlter);
    a.append("ele.seq", r.seq);
    a.append("ele.posLock", r.posLock);
    $.ajax({
        url: "DesignerElementAction!add.action",
        data: a,
        type: "POST",
        dataType: "json",
        processData: false,
        contentType: false,
        success: function(a) {
            if (a.result) {
                r.id = a.id;
                e.attr("id", "ele_" + r.id);
                t(r);
                $(".left-menu ul li div.active").removeClass("active");
                $("#btnEleSelect").addClass("active");
                $("svg.designer-container").css("cursor", "default");
                registerSelect()
            } else {
                e.remove()
            }
        },
        error: function(t) {
            e.remove()
        }
    })
}
function updateElement(e) {
    $.ajax({
        url: "DesignerElementAction!update.action",
        data: e,
        type: "POST",
        dataType: "json",
        processData: false,
        contentType: false
    })
}
function deleteElement() {
    var e = "";
    var t = [];
    d3.selectAll("svg>g.active, svg>g.select").each(function(r) {
        e += r.id + ",";
        t.push(r)
    });
    $("#propertyPanel").empty();
    $.ajax({
        url: "DesignerElementAction!delete.action",
        data: {
            ids: e,
            ruleId: $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(e) {
            if (e.result) {
                d3.selectAll("svg>g.active, svg>g.select").remove();
                undoArray.push({
                    oper: "delete",
                    datas: t
                });
                if (undoArray && undoArray.length > 0) {
                    var r = undoArray[undoArray.length - 1];
                    if (r.oper == "delete") {
                        redoArray.splice(0, redoArray.length);
                        $("#btnEleRedo").addClass("disabled");
                        $("#btnEleUndo").removeClass("disabled")
                    }
                }
            }
        }
    })
}
function DisgnerElement(e, t, r) {
    this.type = e;
    this.x = t;
    this.y = r;
    this.x2 = t;
    this.y2 = r;
    this.width = 0;
    this.height = 0;
    this.radius = 0;
    this.padding = 0;
    this.fontFamily = "宋体";
    this.fontSize = "12px";
    this.fontWeight = "normal";
    this.color = "#000";
    this.content = "请输入!";
    this.showBg = 0;
    this.fill = "#FFFFFF";
    this.stroke = "#000000";
    this.strokeWidth = 1;
    this.strokeDasharray = "0";
    this.strokeLinecap = "";
    this.href = "";
    this.signalName = "请绑定数据!";
    this.signalFlag = "";
    this.trueAlter = "#00FF00";
    this.falseAlter = "#FF0000";
    this.seq = createSeq();
    this.posLock = false
}
function syncElementData(e, t) {
    e.type = t.type;
    e.x = t.x;
    e.y = t.y;
    e.x2 = t.x2;
    e.y2 = t.y2;
    e.width = t.width;
    e.height = t.height;
    e.radius = t.radius;
    e.padding = t.padding;
    e.fontFamily = t.fontFamily;
    e.fontSize = t.fontSize;
    e.fontWeight = t.fontWeight;
    e.color = t.color;
    e.content = t.content;
    e.showBg = t.showBg;
    e.fill = t.fill;
    e.stroke = t.stroke;
    e.strokeWidth = t.strokeWidth;
    e.strokeDasharray = t.strokeDasharray;
    e.strokeLinecap = t.strokeLinecap;
    e.href = t.href;
    e.signalName = t.signalName;
    e.signalFlag = t.signalFlag;
    e.trueAlter = t.trueAlter;
    e.falseAlter = t.falseAlter;
    e.posLock = t.posLock
}
function createSeq() {
    var e = 0;
    d3.selectAll("svg.designer-container > g.ele").each(function(t) {
        if (t.seq >= e) {
            e = t.seq + 1
        }
    });
    return e
}
$(function() {
    $("#btnEleSelect").addClass("active");
    registerSelect();
    $("#btnEleSelect").click(function() {
        $(".left-menu ul li div.active").removeClass("active");
        $("svg.designer-container").css("cursor", "default");
        $(this).addClass("active");
        registerSelect()
    })
});
function registerSelect() {
    var e = d3.behavior.drag().on("dragstart", a).on("drag", n).on("dragend", i);
    d3.selectAll("svg").call(e);
    var t = 0
      , r = 0;
    function a() {
        var e = d3.mouse(this);
        var a = new DisgnerElement("extentRect",e[0],e[1]);
        var n = d3.select("svg > g.active").data()[0];
        if (n && n.id == $("form input[name='ele.id']").val()) {
            $("form input, form select, form textarea").trigger("change")
        }
        d3.selectAll("svg g.extent-rect").remove();
        d3.selectAll("svg g.select").classed("select", false);
        d3.selectAll("svg g.active").classed("active", false);
        $("#propertyPanel").empty();
        $("#activePanel").val("");
        var i = d3.select("svg").append("g").classed("extent-rect", true).classed("select", true).data([a]);
        i.append("rect").classed("extent-rect", true).data([a]).attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        r = $("#myCanvas").scrollLeft();
        t = $("#myCanvas").scrollTop()
    }
    function n() {
        var e = $("#myCanvas").scrollLeft() - r;
        var a = $("#myCanvas").scrollTop() - t;
        r = $("#myCanvas").scrollLeft();
        t = $("#myCanvas").scrollTop();
        var n = d3.select("svg > g.extent-rect");
        var i = n.data()[0];
        i.x2 += d3.event.dx + e;
        i.y2 += d3.event.dy + a;
        i.width += d3.event.dx + e;
        i.height += d3.event.dy + a;
        n.select("rect.extent-rect").attr("width", Math.abs(i.width)).attr("height", Math.abs(i.height));
        if (i.width < 0) {
            n.select("rect.extent-rect").attr("x", i.x2)
        } else {
            n.select("rect.extent-rect").attr("x", i.x)
        }
        if (i.height < 0) {
            n.select("rect.extent-rect").attr("y", i.y2)
        } else {
            n.select("rect.extent-rect").attr("y", i.y)
        }
    }
    function i() {
        var e = d3.select("svg > g.extent-rect").data()[0];
        d3.selectAll("svg g.ele").each(function(t) {
            if (t.type == "line" || t.type == "scrollbar") {
                selectLine(t, e, this)
            } else if (t.type == "rect" || t.type == "text" || t.type == "dataText" || t.type == "lightRect" || t.type == "fillHRect" || t.type == "fillVRect" || t.type == "controlText" || t.type == "controlImage" || t.type == "controlTextFixed" || t.type == "controlImageFixed" || t.type == "timer" || t.type == "lineChart" || t.type == "linkText" || t.type == "linkImage" || t.type == "openPageText" || t.type == "openPageImage" || t.type == "video") {
                selectRect(t, e, this)
            } else if (t.type == "circle" || t.type == "dashboard" || t.type == "lightCircle") {
                selectCircle(t, e, this)
            } else if (t.type == "ellipse") {
                selectEllipse(t, e, this)
            } else if (t.type == "triangle") {
                selectTriangle(t, e, this)
            } else if (t.type == "image" || t.type == "lightImage") {
                selectImage(t, e, this)
            }
        });
        d3.selectAll("svg > g.extent-rect").remove()
    }
}
function hasPoint(e, t, r) {
    var a = true;
    if (e.width < 0) {
        if (t < e.x2 || t > e.x)
            a = false
    } else {
        if (t > e.x2 || t < e.x)
            a = false
    }
    if (e.height < 0) {
        if (r < e.y2 || r > e.y)
            a = false
    } else {
        if (r > e.y2 || r < e.y)
            a = false
    }
    return a
}
function selectLine(e, t, r) {
    if (hasPoint(t, e.x, e.y) && hasPoint(t, e.width, e.height)) {
        d3.select(r).classed("select", true);
        t.selected = true
    }
}
function selectRect(e, t, r) {
    if (hasPoint(t, e.x, e.y) && hasPoint(t, e.x + e.width, e.y + e.height)) {
        d3.select(r).classed("select", true);
        t.selected = true
    }
}
function selectCircle(e, t, r) {
    if (hasPoint(t, e.x - e.width, e.y - e.width) && hasPoint(t, e.x + e.width, e.y + e.width)) {
        d3.select(r).classed("select", true);
        t.selected = true
    }
}
function selectEllipse(e, t, r) {
    if (hasPoint(t, e.x - e.width, e.y - e.height) && hasPoint(t, e.x + e.width, e.y + e.height)) {
        d3.select(r).classed("select", true);
        t.selected = true
    }
}
function selectTriangle(e, t, r) {
    if (hasPoint(t, e.x, e.y) && hasPoint(t, e.width, e.height) && hasPoint(t, e.x2, e.y2)) {
        d3.select(r).classed("select", true);
        t.selected = true
    }
}
function selectImage(e, t, r) {
    var a = 2 * Math.PI / 360 * e.radius;
    var n = (e.x - e.x2) * Math.cos(a) - (e.y - e.y2) * Math.sin(a) + e.x2;
    var i = (e.x - e.x2) * Math.sin(a) + (e.y - e.y2) * Math.cos(a) + e.y2;
    var l = (e.x + e.width - e.x2) * Math.cos(a) - (e.y + e.height - e.y2) * Math.sin(a) + e.x2;
    var o = (e.x + e.width - e.x2) * Math.sin(a) + (e.y + e.height - e.y2) * Math.cos(a) + e.y2;
    if (hasPoint(t, n, i) && hasPoint(t, l, o)) {
        d3.select(r).classed("select", true);
        t.selected = true
    }
}
var undoArray = [];
var redoArray = [];
$(function() {
    $("#btnEleUndo").click(function() {
        if (undoArray && undoArray.length > 0) {
            var e = undoArray.pop();
            if ("move" == e.oper) {
                if (e.status) {
                    var t = [];
                    e.datas.map(function(e) {
                        t.push($.extend({}, d3.select("svg g#ele_" + e.id).data()[0]))
                    });
                    redoArray.push({
                        oper: "move",
                        status: true,
                        datas: t
                    });
                    resetPosition(e.datas);
                    $("#btnEleRedo").removeClass("disabled")
                }
            } else if ("add" == e.oper) {
                redoArray.push({
                    oper: "add",
                    datas: e.datas
                });
                $("#btnEleRedo").removeClass("disabled");
                delData(e.datas, function() {
                    e.datas.map(function(e) {
                        d3.select("svg g#ele_" + e.id).remove()
                    });
                    if ($("svg > g.active").length <= 0) {
                        $("#propertyPanel").empty()
                    }
                })
            } else if ("delete" == e.oper) {
                redoArray.push({
                    oper: "delete",
                    datas: e.datas
                });
                $("#btnEleRedo").removeClass("disabled");
                addData(e.datas, function(e) {
                    createElement(e);
                    d3.selectAll("svg > g.ele").sort(function(e, t) {
                        return d3.ascending(e.seq, t.seq)
                    })
                })
            } else if ("property" == e.oper) {
                if (e.status) {
                    var t = [];
                    e.datas.map(function(e) {
                        t.push($.extend({}, d3.select("svg g#ele_" + e.id).data()[0]))
                    });
                    redoArray.push({
                        oper: "property",
                        status: true,
                        datas: t
                    });
                    resetProperty(e.datas);
                    $("#btnEleRedo").removeClass("disabled")
                }
            } else if ("sort" == e.oper) {
                if (e.status) {
                    var t = [];
                    e.datas.map(function(e) {
                        var r = d3.select("svg g#ele_" + e.id).data()[0];
                        t.push($.extend({}, r));
                        r.seq = e.seq
                    });
                    redoArray.push({
                        oper: "sort",
                        status: true,
                        datas: t
                    });
                    d3.selectAll("svg > g.ele").sort(function(e, t) {
                        return d3.ascending(e.seq, t.seq)
                    });
                    $("#btnEleRedo").removeClass("disabled")
                }
            }
            if (undoArray && undoArray.length < 1) {
                $("#btnEleUndo").addClass("disabled")
            }
        }
    });
    $("#btnEleRedo").click(function() {
        if (redoArray && redoArray.length > 0) {
            var e = redoArray.pop();
            if ("move" == e.oper) {
                if (e.status) {
                    var t = [];
                    e.datas.map(function(e) {
                        t.push($.extend({}, d3.select("svg g#ele_" + e.id).data()[0]))
                    });
                    undoArray.push({
                        oper: "move",
                        status: true,
                        datas: t
                    });
                    resetPosition(e.datas);
                    $("#btnEleUndo").removeClass("disabled")
                }
            } else if ("add" == e.oper) {
                undoArray.push({
                    oper: "add",
                    datas: e.datas
                });
                $("#btnEleUndo").removeClass("disabled");
                addData(e.datas, function(e) {
                    createElement(e);
                    d3.selectAll("svg > g.ele").sort(function(e, t) {
                        return d3.ascending(e.seq, t.seq)
                    })
                });
                d3.selectAll("svg > g.ele").sort(function(e, t) {
                    return d3.ascending(e.seq, t.seq)
                })
            } else if ("delete" == e.oper) {
                undoArray.push({
                    oper: "delete",
                    datas: e.datas
                });
                $("#btnEleUndo").removeClass("disabled");
                delData(e.datas, function() {
                    e.datas.map(function(e) {
                        d3.select("svg g#ele_" + e.id).remove()
                    });
                    if ($("svg > g.active").length <= 0) {
                        $("#propertyPanel").empty()
                    }
                })
            } else if ("property" == e.oper) {
                if (e.status) {
                    var t = [];
                    e.datas.map(function(e) {
                        t.push($.extend({}, d3.select("svg g#ele_" + e.id).data()[0]))
                    });
                    undoArray.push({
                        oper: "property",
                        status: true,
                        datas: t
                    });
                    resetProperty(e.datas);
                    $("#btnEleUndo").removeClass("disabled")
                }
            } else if ("sort" == e.oper) {
                if (e.status) {
                    var t = [];
                    e.datas.map(function(e) {
                        var r = d3.select("svg g#ele_" + e.id).data()[0];
                        t.push($.extend({}, r));
                        r.seq = e.seq
                    });
                    undoArray.push({
                        oper: "sort",
                        status: true,
                        datas: t
                    });
                    d3.selectAll("svg > g.ele").sort(function(e, t) {
                        return d3.ascending(e.seq, t.seq)
                    });
                    $("#btnEleUndo").removeClass("disabled")
                }
            }
            if (undoArray && undoArray.length > 10) {
                undoArray.splice(0, undoArray.length - 10)
            }
            if (redoArray && redoArray.length < 1) {
                $("#btnEleRedo").addClass("disabled")
            }
        }
    })
});
function saveMoveUndo() {
    var e = d3.select("svg > g.active").data()[0];
    undoArray.push({
        oper: "move",
        status: true,
        datas: [$.extend({}, e)]
    });
    redoArray.splice(0, redoArray.length);
    $("#btnEleRedo").addClass("disabled");
    $("#btnEleUndo").removeClass("disabled");
    if (undoArray && undoArray.length > 10) {
        undoArray.splice(0, undoArray.length - 10)
    }
}
function savePropertyUndo() {
    var e = d3.select("svg > g.active").data()[0];
    undoArray.push({
        oper: "property",
        status: true,
        datas: [$.extend({}, e)]
    });
    redoArray.splice(0, redoArray.length);
    $("#btnEleRedo").addClass("disabled");
    $("#btnEleUndo").removeClass("disabled");
    if (undoArray && undoArray.length > 10) {
        undoArray.splice(0, undoArray.length - 10)
    }
}
function addData(e, t) {
    e.map(function(e) {
        var r = new FormData;
        r.append("ele.ruleId", $("#ruleId").val());
        r.append("ele.conId", $("#conId").val());
        r.append("ele.type", e.type);
        r.append("ele.x", Math.round(e.x));
        r.append("ele.y", Math.round(e.y));
        r.append("ele.x2", Math.round(e.x2));
        r.append("ele.y2", Math.round(e.y2));
        r.append("ele.width", Math.round(e.width));
        r.append("ele.height", Math.round(e.height));
        r.append("ele.radius", Math.round(e.radius));
        r.append("ele.padding", Math.round(e.padding));
        r.append("ele.fill", e.fill);
        r.append("ele.stroke", e.stroke);
        r.append("ele.strokeWidth", e.strokeWidth);
        r.append("ele.strokeDasharray", e.strokeDasharray);
        r.append("ele.strokeLinecap", e.strokeLinecap);
        r.append("ele.fontFamily", e.fontFamily);
        r.append("ele.fontSize", e.fontSize);
        r.append("ele.fontWeight", e.fontWeight);
        r.append("ele.color", e.color);
        r.append("ele.content", e.content);
        r.append("ele.showBg", e.showBg);
        r.append("ele.trueAlter", e.trueAlter);
        r.append("ele.falseAlter", e.falseAlter);
        r.append("ele.seq", e.seq);
        r.append("ele.posLock", e.posLock);

        // $.ajax({
        //     url: "DesignerElementAction!add.action",
        //     data: r,
        //     type: "POST",
        //     dataType: "json",
        //     processData: false,
        //     contentType: false,
        //     success: function(r) {
        var addResult = {"result":true,"id":438604};
                if (addResult.result) {
                    refreshUndoId(e.id, addResult.id);
                    e.id = addResult.id;
                    if (t) {
                        t(e)
                    }
                }
        //     }
        // })
    })
}
function refreshUndoId(e, t) {
    undoArray.map(function(r) {
        r.datas.map(function(r) {
            if (r.id == e) {
                r.id = t
            }
        })
    });
    redoArray.map(function(r) {
        r.datas.map(function(r) {
            if (r.id == e) {
                r.id = t
            }
        })
    })
}
function delData(e, t) {
    var r = "";
    e.map(function(e) {
        r += e.id + ","
    });
    $.ajax({
        url: "DesignerElementAction!delete.action",
        data: {
            ids: r,
            ruleId: $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(e) {
            if (e.result) {
                if (t) {
                    t()
                }
            }
        }
    })
}
function resetPosition(e) {
    e.map(function(e) {
        var t = d3.select("svg>g#ele_" + e.id);
        var r = t.data()[0];
        if (r && r.id == e.id) {
            r.x = e.x;
            r.y = e.y;
            r.x2 = e.x2;
            r.y2 = e.y2;
            r.width = e.width;
            r.height = e.height;
            r.radius = e.radius;
            if (r.type == "line") {
                t.selectAll("line").attr("x1", r.x).attr("y1", r.y).attr("x2", r.width).attr("y2", r.height);
                moveLinePoint(t)
            } else if (r.type == "rect" || r.type == "lightRect" || r.type == "controlText" || r.type == "controlTextFixed" || r.type == "timer" || r.type == "linkText" || r.type == "openPageText") {
                t.select("rect").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                t.select("text").attr("x", Math.round(r.x + r.width / 2)).attr("y", Math.round(r.y + r.height / 2));
                moveRectPoint(t)
            } else if (r.type == "dataText" || r.type == "text") {
                t.select("rect").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                t.select("text").attr("x", function() {
                    if ("start" == r.trueAlter) {
                        return r.x
                    } else if ("end" == r.trueAlter) {
                        return Math.round(r.x + r.width)
                    } else {
                        return Math.round(r.x + r.width / 2)
                    }
                }).attr("y", Math.round(r.y + r.height / 2));
                moveRectPoint(t)
            } else if (r.type == "image" || r.type == "lightImage") {
                t.select("image").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                t.attr("transform", function(e) {
                    return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
                });
                moveImagePoint(t)
            } else if (r.type == "ellipse") {
                t.select("ellipse").attr("cx", r.x).attr("cy", r.y).attr("rx", r.width).attr("ry", r.height);
                moveEllipsePoint(t)
            } else if (r.type == "triangle") {
                t.select("polygon.shape-triangle").attr("points", r.x + "," + r.y + " " + r.x2 + "," + r.y2 + " " + r.width + "," + r.height);
                moveTrianglePoint(t)
            } else if (r.type == "lightCircle" || r.type == "circle") {
                t.select("circle").attr("cx", r.x).attr("cy", r.y).attr("r", r.width);
                t.select("text").attr("x", r.x).attr("y", r.y);
                moveCirclePoint(t)
            } else if (r.type == "fillHRect") {
                t.select("rect").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                t.selectAll("polygon").attr("points", Math.round(r.x + 1) + "," + Math.round(r.y + 1) + " " + Math.round(r.x + r.width / 2 - 1) + "," + Math.round(r.y + 1) + " " + Math.round(r.x + r.width / 2 - 1) + "," + Math.round(r.y + r.height - 1) + " " + Math.round(r.x + 1) + "," + Math.round(r.y + r.height - 1));
                t.select("text").attr("x", Math.round(r.x + r.width / 2 + 5)).attr("y", Math.round(r.y + r.height / 2));
                moveRectPoint(t)
            } else if (r.type == "fillVRect") {
                t.select("rect").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                t.selectAll("polygon").attr("points", Math.round(r.x + 1) + "," + Math.round(r.y + r.height / 2 - 1) + " " + Math.round(r.x + r.width - 1) + "," + Math.round(r.y + r.height / 2 - 1) + " " + Math.round(r.x + r.width - 1) + "," + Math.round(r.y + r.height - 1) + " " + Math.round(r.x + 1) + "," + Math.round(r.y + r.height - 1));
                t.select("text").attr("x", Math.round(r.x + r.width / 2)).attr("y", Math.round(r.y + r.height / 2 - 10));
                moveRectPoint(t)
            } else if (r.type == "dashboard") {
                resetDashBoard(t)
            } else if (r.type == "controlImage" || r.type == "controlImageFixed" || r.type == "linkImage" || r.type == "openPageImage" || r.type == "video") {
                t.select("image").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                moveImagePoint(t)
            } else if (r.type == "lineChart") {
                t.select("rect").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                t.select("svg").attr("x", r.x).attr("y", r.y).attr("width", r.width).attr("height", r.height);
                bindLineData(t);
                renderChartLine(t);
                moveRectPoint(t)
            } else if (r.type == "scrollbar") {
                t.selectAll("line").attr("x1", r.x).attr("y1", r.y).attr("x2", r.width).attr("y2", r.height);
                t.select("polygon.scrollbar-border").attr("points", calcScrollbarPoints);
                moveLinePoint(t)
            }
            resetAllForm(r)
        }
    })
}
function resetProperty(e) {
    e.map(function(e) {
        var t = d3.select("svg>g#ele_" + e.id);
        var r = t.data()[0];
        if (r && r.id == e.id) {
            r.type = e.type;
            r.radius = e.radius;
            r.padding = e.padding;
            r.fontFamily = e.fontFamily;
            r.fontSize = e.fontSize;
            r.fontWeight = e.fontWeight;
            r.color = e.color;
            r.content = e.content;
            r.showBg = e.showBg;
            r.fill = e.fill;
            r.stroke = e.stroke;
            r.strokeWidth = e.strokeWidth;
            r.strokeDasharray = e.strokeDasharray;
            r.strokeLinecap = e.strokeLinecap;
            r.href = e.href;
            r.signalName = e.signalName;
            r.signalFlag = e.signalFlag;
            r.trueAlter = e.trueAlter;
            r.falseAlter = e.falseAlter;
            if (r.type == "line") {
                t.select("line.shape-line").style({
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                })
            } else if (r.type == "rect") {
                t.select("rect").attr("rx", r.radius).attr("ry", r.radius).style({
                    fill: r.fill,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                })
            } else if (r.type == "lightRect") {
                t.select("rect").attr("rx", r.radius).attr("ry", r.radius).style({
                    fill: r.trueAlter,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                });
                t.select("text").style("fill", r.falseAlter).text(r.signalName)
            } else if (r.type == "text" || r.type == "dataText" || r.type == "timer") {
                t.select("rect").attr("rx", r.radius).attr("ry", r.radius).style({
                    fill: r.fill,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray,
                    opacity: r.showBg
                });
                t.select("text").style("font-family", r.fontFamily).style("font-size", r.fontSize).style("font-weight", r.fontWeight).style("fill", r.color).text(r.content);
                if (r.type == "dataText") {
                    t.select("text").style("text-anchor", r.trueAlter).attr("x", function() {
                        if ("start" == r.trueAlter) {
                            return r.x
                        } else if ("end" == r.trueAlter) {
                            return Math.round(r.x + r.width)
                        } else {
                            return Math.round(r.x + r.width / 2)
                        }
                    }).text(r.signalName)
                } else if (r.type == "text") {
                    t.select("text").style("text-anchor", r.trueAlter).attr("x", function() {
                        if ("start" == r.trueAlter) {
                            return r.x
                        } else if ("end" == r.trueAlter) {
                            return Math.round(r.x + r.width)
                        } else {
                            return Math.round(r.x + r.width / 2)
                        }
                    }).text(r.content)
                } else if (r.type == "timer") {
                    t.select("text").text((new Date).Format(r.content))
                }
            } else if (r.type == "linkText") {
                resetLinkText(t)
            } else if (r.type == "linkImage") {
                resetLinkImage(t)
            } else if (r.type == "controlText" || r.type == "controlTextFixed") {
                resetControlText(t)
            } else if (r.type == "controlImage" || r.type == "controlImageFixed") {
                resetControlImage(t)
            } else if (r.type == "openPageText") {
                resetOpenPageText(t)
            } else if (r.type == "openPageImage") {
                resetOpenPageImage(t)
            } else if (r.type == "image") {
                t.select("image").attr("xlink:href", initCDN + "userimg/" + r.href)
            } else if (r.type == "lightImage") {
                t.select("image").attr("xlink:href", initCDN + "userimg/" + r.trueAlter)
            } else if (r.type == "ellipse") {
                t.select("ellipse").style({
                    fill: r.fill,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                })
            } else if (r.type == "triangle") {
                t.select("polygon.shape-triangle").style({
                    fill: r.fill,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                })
            } else if (r.type == "circle") {
                t.select("circle").style({
                    fill: r.fill,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                })
            } else if (r.type == "lightCircle" || r.type == "circle") {
                t.select("circle").style({
                    fill: r.trueAlter,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray
                });
                t.select("text").style("fill", r.falseAlter).text(r.signalName)
            } else if (r.type == "fillHRect" || r.type == "fillVRect") {
                t.select("rect").style({
                    fill: r.falseAlter,
                    stroke: r.stroke,
                    "stroke-width": r.strokeWidth,
                    "stroke-dasharray": r.strokeDasharray,
                    opacity: r.showBg
                });
                t.select("polygon").style({
                    fill: r.trueAlter
                });
                t.select("text").style("font-family", r.fontFamily).style("font-size", r.fontSize).style("font-weight", r.fontWeight).style("fill", r.color).text(r.signalName);
                if (r.type == "fillVRect") {
                    resetFillVRect(t)
                } else {
                    resetFillHRect(t)
                }
            } else if (r.type == "dashboard") {
                t.selectAll("path.dashboard").style("fill", r.fill);
                t.selectAll("polygon.dashboard-point").style("fill", r.fill);
                t.selectAll("path.dashboard-laxis").style("stroke", r.stroke);
                t.selectAll("path.dashboard-saxis").style("stroke", r.stroke);
                t.selectAll("text").style("fill", r.color).style("font-family", r.fontFamily);
                t.selectAll("text.dashboard-value").style("font-size", r.fontSize).style("font-weight", r.fontWeight);
                t.select("text.dashboard-title").text(r.signalName)
            } else if (r.type == "lineChart") {
                t.select("rect").style({
                    fill: e.fill,
                    stroke: e.fill,
                    opacity: e.showBg
                });
                t.select("svg.line-chart").style({
                    "font-family": e.fontFamily,
                    "font-size": e.fontSize
                });
                t.select("svg.line-chart > g").style({
                    "font-family": e.fontFamily,
                    "font-size": e.fontSize
                });
                t.select("svg.line-chart > g > path.line").style("stroke", r.stroke);
                t.selectAll("svg.line-chart > g > g.axis path").style("stroke", r.trueAlter);
                t.selectAll("svg.line-chart > g > g.axis line").style("stroke", r.trueAlter);
                t.selectAll("svg.line-chart > g > g.axis text").style("fill", r.color);
                t.select("svg.line-chart > g").attr("transform", "translate(" + r.padding + ",30)");
                bindLineData(t);
                renderChartLine(t)
            } else if (r.type == "scrollbar") {
                t.selectAll("line").style({
                    stroke: e.stroke,
                    "stroke-width": e.strokeWidth,
                    "stroke-dasharray": e.strokeDasharray
                });
                t.select("polygon.scrollbar-border").style({
                    stroke: e.fill,
                    opacity: e.showBg
                })
            }
            resetAllForm(r)
        }
    })
}
function resetAllForm(e) {
    if (e && e.id == $("form input[name='ele.id']").val()) {
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        if ($("#eleX2").length > 0 && $("#eleX2").hasClass("easyui-numberspinner")) {
            $("#eleX2").numberspinner("setValue", e.x2)
        }
        if ($("#eleY2").length > 0 && $("#eleY2").hasClass("easyui-numberspinner")) {
            $("#eleY2").numberspinner("setValue", e.y2)
        }
        if ($("#eleWidth").length > 0 && $("#eleWidth").hasClass("easyui-numberspinner")) {
            $("#eleWidth").numberspinner("setValue", e.width)
        }
        if ($("#eleHeight").length > 0 && $("#eleHeight").hasClass("easyui-numberspinner")) {
            $("#eleHeight").numberspinner("setValue", e.height)
        }
        if ($("input#eleX2").length > 0) {
            $("#eleX2").val(e.x2)
        }
        if ($("input#eleY2").length > 0) {
            $("#eleY2").val(e.y2)
        }
        if ($("#elePadding").length > 0 && $("#elePadding").hasClass("easyui-numberspinner")) {
            $("#elePadding").numberspinner("setValue", e.padding)
        }
        if (e.type == "scrollbar") {
            $("#eleStrokeWidth").numberspinner("setValue", e.strokeWidth);
            if (e.strokeDasharray) {
                var t = e.strokeDasharray.split(" ");
                if (t[0]) {
                    $("#eleStrokeDasharray1").numberspinner("setValue", parseInt(t[0]))
                } else {
                    $("#eleStrokeDasharray1").numberspinner("setValue", 10)
                }
                if (t[1]) {
                    $("#eleStrokeDasharray2").numberspinner("setValue", parseInt(t[1]))
                } else {
                    $("#eleStrokeDasharray2").numberspinner("setValue", 10)
                }
            }
            if (e.showBg == "0") {
                $("form #showBg0").prop("checked", true);
                $("form #showBg1").prop("checked", false)
            } else {
                $("form #showBg0").prop("checked", false);
                $("form #showBg1").prop("checked", true)
            }
            if (e.strokeLinecap == "3000") {
                $("#scrollbarForm #strokeLinecapForward").prop("checked", true);
                $("#scrollbarForm #strokeLinecapBack").prop("checked", false)
            } else {
                $("#scrollbarForm #strokeLinecapForward").prop("checked", false);
                $("#scrollbarForm #strokeLinecapBack").prop("checked", true)
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            $("#eleSignalName").val(e.signalName);
            $("#eleRadius").val(e.radius);
            if (e.content) {
                var r = e.content.replace(/[0-9\.\-]/gi, "").replace("X", "");
                $("#eleContentSelect").val(r);
                var a = e.content.replace(/[^0-9\.\-]/gi, "");
                $("#eleContentInput").val(a)
            }
        } else {
            if ($("#eleRadius").length > 0 && $("#eleRadius").hasClass("easyui-numberspinner")) {
                $("#eleRadius").numberspinner("setValue", e.radius)
            }
            if ($("#eleFontFamily").length > 0) {
                $("#eleFontFamily").val(e.fontFamily)
            }
            if ($("#eleFontSize").length > 0) {
                $("#eleFontSize").val(e.fontSize)
            }
            if ($("#eleFontWeight").length > 0) {
                $("#eleFontWeight").val(e.fontWeight)
            }
            if ($("#eleContent").length > 0) {
                $("#eleContent").val(e.content)
            }
            if ($("#eleStrokeDasharray").length > 0) {
                $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray)
            }
            if ($("#eleStrokeWidth").length > 0) {
                $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth)
            }
            if (e.fill.length > 0 && $("#eleFill").hasClass("input_cxcolor")) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0 && $("#eleStroke").hasClass("input_cxcolor")) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0 && $("#eleColor").hasClass("input_cxcolor")) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
            if (e.trueAlter.length > 0 && $("#eleTrueAlter").hasClass("input_cxcolor")) {
                $("#eleTrueAlter").cxColor(function(t) {
                    t.color(e.trueAlter)
                })
            }
            if (e.falseAlter.length > 0 && $("#eleFalseAlter").hasClass("input_cxcolor")) {
                $("#eleFalseAlter").cxColor(function(t) {
                    t.color(e.falseAlter)
                })
            }
            if (e.trueAlter.length > 0 && $("select#eleTrueAlter").length > 0) {
                $("#eleTrueAlter").val(e.trueAlter)
            }
            if ($("img#eleTrueAlter").length > 0) {
                $("#eleTrueAlter").attr("src", initCDN + "userimg/" + e.trueAlter)
            }
            if ($("img#eleFalseAlter").length > 0) {
                $("#eleFalseAlter").attr("src", initCDN + "userimg/" + e.falseAlter)
            }
            if ($("img#eleControlHref").length > 0) {
                $("#eleControlHref").attr("src", initCDN + "userimg/" + e.href)
            }
            if ($("img#eleLinkHref").length > 0) {
                $("#eleLinkHref").attr("src", initCDN + "userimg/" + e.href)
            }
            if ($("#eleContentSelect").length > 0 && $("#eleContentInput").length > 0) {
                var r = e.content.replace(/[0-9\.\-]/gi, "").replace("X", "");
                $("#eleContentSelect").val(r);
                var a = e.content.replace(/[^0-9\.\-]/gi, "");
                $("#eleContentInput").val(a)
            }
            if ($("form #showBg0").length > 0 && $("form #showBg1").length > 0) {
                if (e.showBg == "0") {
                    $("form #showBg0").prop("checked", true);
                    $("form #showBg1").prop("checked", false)
                } else {
                    $("form #showBg0").prop("checked", false);
                    $("form #showBg1").prop("checked", true)
                }
            }
            if ($("input#eleSignalName").length > 0) {
                $("#eleSignalName").val(e.signalName)
            }
            if ($("select#eleType").length > 0) {
                $("#eleType").val(e.type)
            }
        }
        if (e.type == "lineChart") {
            if (e.falseAlter == "fixed") {
                $("#dataLineChartForm #falseAlterfixed").prop("checked", true);
                $("#dataLineChartForm #falseAlterAuto").prop("checked", false);
                $("#dataLineChartForm tr.yaxis-fixed").show()
            } else {
                $("#dataLineChartForm #falseAlterfixed").prop("checked", false);
                $("#dataLineChartForm #falseAlterAuto").prop("checked", true);
                $("#dataLineChartForm tr.yaxis-fixed").hide()
            }
            var n = calcLineCharYRange(e);
            $("#eleContentMinY").val(n[1]);
            $("#eleContentMaxY").val(n[0]);
            $("#eleRadius").val(e.radius)
        } else if (e.type == "openPageText") {
            $("#OpenPageForm tr.openPageText").show();
            $("#OpenPageForm tr.openPageImage").hide();
            $("#OpenPageForm #showText").prop("checked", true);
            $("#OpenPageForm #showImage").prop("checked", false);
            $("#eleSignalFlag").val(e.signalFlag)
        } else if (e.type == "openPageImage") {
            $("#OpenPageForm tr.openPageText").hide();
            $("#OpenPageForm tr.openPageImage").show();
            $("#OpenPageForm #showText").prop("checked", false);
            $("#OpenPageForm #showImage").prop("checked", true);
            $("#eleSignalFlag").val(e.signalFlag);
            $("#eleOpenPageHref").attr("src", initCDN + "userimg/" + e.href)
        } else if (e.type == "linkText") {
            $("#LinkForm tr.linkText").show();
            $("#LinkForm tr.linkImage").hide();
            $("#LinkForm #showText").prop("checked", true);
            $("#LinkForm #showImage").prop("checked", false);
            $("#eleTrueAlter").val(e.trueAlter);
            $("#eleFalseAlter").val(e.falseAlter)
        } else if (e.type == "linkImage") {
            $("#LinkForm tr.linkText").hide();
            $("#LinkForm tr.linkImage").show();
            $("#LinkForm #showText").prop("checked", false);
            $("#LinkForm #showImage").prop("checked", true);
            $("#eleTrueAlter").val(e.trueAlter);
            $("#eleFalseAlter").val(e.falseAlter)
        } else if (e.type == "controlTextFixed" || e.type == "controlText" || e.type == "controlImageFixed" || e.type == "controlImage") {
            var i = commandMap["" + e.signalFlag];
            if (i) {
                $("#eleFieldName").val(i.fieldName);
                if (i.dataType == "bit") {
                    $("#eleTextTrueAlter").hide();
                    $("#eleSelectTrueAlter").show();
                    $("#eleDataType").val("bit");
                    $("#eleSelectTrueAlter").val(e.trueAlter)
                } else {
                    $("#eleTextTrueAlter").show();
                    $("#eleSelectTrueAlter").hide();
                    $("#eleDataType").val("unbit");
                    $("#eleTextTrueAlter").val(e.trueAlter)
                }
            } else {
                $("#eleFieldName").val("");
                $("#eleTextTrueAlter").show();
                $("#eleSelectTrueAlter").hide();
                $("#eleTextTrueAlter").val(e.trueAlter)
            }
            $("#eleContent").val(e.content);
            $("#eleControlHref").attr("src", initCDN + "userimg/" + e.href);
            if (e.type == "controlTextFixed") {
                $("#dataControlForm tr.controlText").show();
                $("#dataControlForm tr.controlImage").hide();
                $("#dataControlForm tr.controlFixed").show();
                $("#dataControlForm #showText").prop("checked", true);
                $("#dataControlForm #showImage").prop("checked", false);
                $("#dataControlForm #writeFixed").prop("checked", true);
                $("#dataControlForm #writeSet").prop("checked", false)
            } else if (e.type == "controlText") {
                $("#dataControlForm tr.controlText").show();
                $("#dataControlForm tr.controlImage").hide();
                $("#dataControlForm tr.controlFixed").hide();
                $("#dataControlForm #showText").prop("checked", true);
                $("#dataControlForm #showImage").prop("checked", false);
                $("#dataControlForm #writeFixed").prop("checked", false);
                $("#dataControlForm #writeSet").prop("checked", true)
            } else if (e.type == "controlImageFixed") {
                $("#dataControlForm tr.controlText").hide();
                $("#dataControlForm tr.controlImage").show();
                $("#dataControlForm tr.controlFixed").show();
                $("#dataControlForm #showText").prop("checked", false);
                $("#dataControlForm #showImage").prop("checked", true);
                $("#dataControlForm #writeFixed").prop("checked", true);
                $("#dataControlForm #writeSet").prop("checked", false)
            } else if (e.type == "controlImage") {
                $("#dataControlForm tr.controlText").hide();
                $("#dataControlForm tr.controlImage").show();
                $("#dataControlForm tr.controlFixed").hide();
                $("#dataControlForm #showText").prop("checked", false);
                $("#dataControlForm #showImage").prop("checked", true);
                $("#dataControlForm #writeFixed").prop("checked", false);
                $("#dataControlForm #writeSet").prop("checked", true)
            }
        }
    }
}
$(function() {
    $("#btnFillRect").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initFillHRect()
    })
});
function initFillHRect() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("fillHRect",e[0],e[1]);
        t.trueAlter = "#f00";
        t.falseAlter = "#ddd";
        t.x2 = 0;
        t.y2 = 100;
        t.showBg = 1;
        var r = createFillHRect(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect.fill-rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect.fill-rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect.fill-rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.selectAll("svg > g.active > polygon").attr("points", function(e) {
            return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2 + 5)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openFillRectProperty)
        }
    }
}
function createFillHRect(e) {
    if (!e.signalName) {
        e.signalName = "请绑定数据!"
    }
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("fill-rect", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.falseAlter,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("polygon").classed("fill-rect", true).attr("points", function(e) {
        return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
    }).style({
        fill: e.trueAlter
    });
    r.append("text").classed("fill-rect", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2 + 5)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(e.signalName);
    r.on("click", openFillRectProperty);
    drawAllRectPoint(r, function() {
        r.select("polygon").attr("points", function(e) {
            return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2 - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
        });
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2 + 5)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function createFillVRect(e) {
    if (!e.signalName) {
        e.signalName = "请选择!"
    }
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("fill-rect", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.falseAlter,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("polygon").classed("fill-rect", true).attr("points", function(e) {
        return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2 - 1) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
    }).style({
        fill: e.trueAlter
    });
    r.append("text").classed("fill-rect", true).classed("vertical", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2 - 10)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(e.signalName);
    r.on("click", openFillRectProperty);
    drawAllRectPoint(r, function() {
        r.select("polygon").attr("points", function(e) {
            return Math.round(e.x + 1) + "," + Math.round(e.y + e.height / 2) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height / 2) + " " + Math.round(e.x + e.width - 1) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
        });
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2 - 10)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openFillRectProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && ($("#activePanel").val() == "fillHRect" || $("#activePanel").val() == "fillVRect")) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/fill_rect.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleType").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleX2").val(e.x2);
        $("#eleY2").val(e.y2);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#fillRectForm #showBg0").prop("checked", true);
            $("#fillRectForm #showBg1").prop("checked", false)
        } else {
            $("#fillRectForm #showBg0").prop("checked", false);
            $("#fillRectForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleColor").cxColor({
                color: e.color
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleFalseAlter").cxColor({
                color: e.falseAlter
            });
            $("#eleTrueAlter").cxColor({
                color: e.trueAlter
            })
        } else {
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.falseAlter.length > 0) {
                $("#eleFalseAlter").cxColor(function(t) {
                    t.color(e.falseAlter)
                })
            }
            if (e.trueAlter.length > 0) {
                $("#eleTrueAlter").cxColor(function(t) {
                    t.color(e.trueAlter)
                })
            }
        }
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleSignalName").val(e.signalName)
    }
}
function resetFillHRect(e) {
    var t = e.data()[0];
    e.select("polygon.fill-rect").attr("points", Math.round(t.x + 1) + "," + Math.round(t.y + 1) + " " + Math.round(t.x + t.width / 2) + "," + Math.round(t.y + 1) + " " + Math.round(t.x + t.width / 2) + "," + Math.round(t.y + t.height - 1) + " " + Math.round(t.x + 1) + "," + Math.round(t.y + t.height - 1));
    e.select("text.fill-rect").classed("vertical", false).attr("x", function(e) {
        return Math.round(e.x + e.width / 2 + 5)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    });
    e.selectAll("g.selected-rect").remove();
    drawAllRectPoint(e, function() {
        e.selectAll("polygon.fill-rect").attr("points", function(e) {
            return Math.round(e.x + 1) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2) + "," + Math.round(e.y + 1) + " " + Math.round(e.x + e.width / 2) + "," + Math.round(e.y + e.height - 1) + " " + Math.round(e.x + 1) + "," + Math.round(e.y + e.height - 1)
        });
        e.select("text.fill-rect").attr("x", function(e) {
            return Math.round(e.x + e.width / 2 + 5)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    })
}
function resetFillVRect(e) {
    var t = e.data()[0];
    e.select("polygon.fill-rect").attr("points", Math.round(t.x + 1) + "," + Math.round(t.y + t.height / 2) + " " + Math.round(t.x + t.width - 1) + "," + Math.round(t.y + t.height / 2) + " " + Math.round(t.x + t.width - 1) + "," + Math.round(t.y + t.height - 1) + " " + Math.round(t.x + 1) + "," + Math.round(t.y + t.height - 1));
    e.select("text.fill-rect").classed("vertical", true).attr("x", Math.round(t.x + t.width / 2)).attr("y", Math.round(t.y + t.height / 2 - 10));
    e.selectAll("g.selected-rect").remove();
    drawAllRectPoint(e, function() {
        e.selectAll("polygon.fill-rect").attr("points", Math.round(t.x + 1) + "," + Math.round(t.y + t.height / 2) + " " + Math.round(t.x + t.width - 1) + "," + Math.round(t.y + t.height / 2) + " " + Math.round(t.x + t.width - 1) + "," + Math.round(t.y + t.height - 1) + " " + Math.round(t.x + 1) + "," + Math.round(t.y + t.height - 1));
        e.select("text.fill-rect").attr("x", Math.round(t.x + t.width / 2)).attr("y", Math.round(t.y + t.height / 2 - 10));
        resetForm()
    })
}
var commandMap = {};
var conList;
var copyArray = new Array;
$(function() {
    $("#btnEleExport").click(function() {
        window.open("DesignerElementAction!exportJson.action?conId=" + $("#conId").val(), "_blank")
    });
    $("#btnEleImport").click(function() {
        $("#importEleDialog").dialog("open")
    });
    $("#btnEleSave, #menuEleSave").click(function() {
        saveElements()
    });
    $("#btnEleRemove,#menuEleRemove").click(function() {
        $.messager.confirm("确定", "确定要删除该元件吗?", function(e) {
            if (e) {
                deleteElement()
            }
        })
    });
    $("#btnEleCopy,#menuEleCopy").click(function() {
        copy()
    });
    $("#btnElePaste,#menuElePaste").click(function() {
        paste()
    });
    $("#btnEleUp,#menuEleUp").click(function() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.posLock) {
            return
        }
        undoArray.push({
            oper: "sort",
            status: true,
            datas: [$.extend({}, e)]
        });
        redoArray.splice(0, redoArray.length);
        $("#btnEleRedo").addClass("disabled");
        $("#btnEleUndo").removeClass("disabled");
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.selectAll("svg > g.ele").each(function(t) {
            if (t.seq >= e.seq) {
                e.seq = t.seq + 1
            }
        });
        d3.selectAll("svg > g.ele").sort(function(e, t) {
            return d3.ascending(e.seq, t.seq)
        })
    });
    $("#btnEleDown,#menuEleDown").click(function() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.posLock) {
            return
        }
        undoArray.push({
            oper: "sort",
            status: true,
            datas: [$.extend({}, e)]
        });
        redoArray.splice(0, redoArray.length);
        $("#btnEleRedo").addClass("disabled");
        $("#btnEleUndo").removeClass("disabled");
        if (undoArray && undoArray.length > 10) {
            undoArray.splice(0, undoArray.length - 10)
        }
        d3.selectAll("svg > g.ele").each(function(t) {
            if (t.seq <= e.seq) {
                e.seq = t.seq - 1
            }
        });
        d3.selectAll("svg > g.ele").sort(function(e, t) {
            return d3.ascending(e.seq, t.seq)
        })
    });
    $("#leftMenuTool").click(function() {
        $("#designerLayout").layout("collapse", "west");
        $("#leftMenuTool").hide()
    });
    $.ajax({
        url: "RuleAction!queryAllCommands.action",
        data: {
            ruleId: $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(e) {
            if (e.result) {
                e.list.map(function(e) {
                    commandMap["" + e.id] = e
                })
            }
        }
    });
    var designerAction = {"result":true,"list":[{"bgColor":"","bgImage":"","bgShow":true,"conTitle":"设备首页","conType":"2","fontSize":"","height":"768","id":4995,"pageType":true,"ruleId":3933,"ruleName":"","width":"1280"},{"bgColor":"","bgImage":"","bgShow":true,"conTitle":"子页面1","conType":"2","fontSize":"","height":"768","id":4997,"pageType":false,"ruleId":3933,"ruleName":"","width":"1280"},{"bgColor":"","bgImage":"","bgShow":true,"conTitle":"子页面2","conType":"2","fontSize":"","height":"768","id":8414,"pageType":false,"ruleId":3933,"ruleName":"","width":"1280"}]};
    (function(e){
        if (e.result) {
            conList = e.list;
            $("#selectCon").empty();
            e.list.map(function(e) {
                $("#selectCon").append("<option value='" + e.id + "'>" + e.conTitle + "</option>")
            })
        }
    })(designerAction);
    $.ajax({
        url: "DesignerContainerAction!query.action",
        data: {
            "con.ruleId": $("#ruleId").val()
        },
        type: "POST",
        dataType: "json",
        success: function(e) {
            if (e.result) {
                conList = e.list;
                $("#selectCon").empty();
                e.list.map(function(e) {
                    $("#selectCon").append("<option value='" + e.id + "'>" + e.conTitle + "</option>")
                })
            }
        }
    });
    $(document).keyup(function(e) {
        if (e.keyCode == 46) {
            if ($("#databaseDialog").parent().is(":hidden")) {
                $.messager.confirm("确定", "确定要删除该元件吗?", function(e) {
                    if (e) {
                        deleteElement()
                    }
                })
            } else {
                if ($("#imgGroup img.active").attr("id")) {
                    $.messager.confirm("确定", "确定要删除该图片吗?", function(e) {
                        if (e) {
                            removeImage()
                        }
                    })
                }
            }
        }
    });
    $(document).keydown(function(e) {
        var t = e.keyCode;
        switch (t) {
        case 37:
            moveSelect(-1, 0);
            break;
        case 38:
            moveSelect(0, -1);
            break;
        case 39:
            moveSelect(1, 0);
            break;
        case 40:
            moveSelect(0, 1);
            break
        }
        if (e.ctrlKey == 1) {
            if (t == 86) {
                paste()
            }
            if (t == 67) {
                copy()
            }
        }
    });
    $("svg.designer-container").bind("contextmenu", function(e) {
        e.preventDefault();
        $("#rightmenu").menu("show", {
            left: e.pageX,
            top: e.pageY
        })
    });
    $("#importEleDialog").dialog({
        title: "导入组态图",
        width: 350,
        height: 140,
        closed: true,
        modal: true,
        buttons: [{
            text: "导入",
            iconCls: "icon-ok",
            handler: function() {
                importJson()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#importEleDialog").dialog("close")
            }
        }]
    });
    $("#copyToPageDialog").dialog({
        title: "复制到其他页面",
        width: 350,
        height: 140,
        closed: true,
        modal: true,
        buttons: [{
            text: "复制",
            iconCls: "icon-ok",
            handler: function() {
                saveByConId()
            }
        }, {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#copyToPageDialog").dialog("close")
            }
        }]
    });
    $("#menuEleCopyToPage").click(function() {
        $("#copyToPageDialog").dialog("open")
    });
    $(window).resize(function() {
        if ($(document.body).width() < 1200) {
            $(".top-body>div.top-title").hide();
            $(".top-body>div.top-menu").css("width", "100%")
        } else {
            $(".top-body>div.top-title").show();
            $(".top-body>div.top-menu").css("width", "80%")
        }
    });
    if ($(document.body).width() < 1200) {
        $(".top-body>div.top-title").hide();
        $(".top-body>div.top-menu").css("width", "100%")
    }
    $(document.body).layout("panel", "north").parent().add("html,body").css("overflow", "inherit");
    setInterval("refreshSession()", 15 * 6e4)
});
function copy() {
    copyArray.splice(0, copyArray.length);
    if (document.activeElement.id == "designerLayout" || document.activeElement.id == "btnEleCopy") {
        d3.selectAll("svg > g.select, svg > g.active").each(function(e) {
            var t = new DisgnerElement(e.type,e.x,e.y);
            syncElementData(t, e);
            if (e.type == "line" || e.type == "scrollbar") {
                t.x = t.x + 50;
                t.width = t.width + 50;
                t.y = t.y + 50;
                t.height = t.height + 50
            } else if (e.type == "triangle") {
                t.x = t.x + 50;
                t.x2 = t.x2 + 50;
                t.width = t.width + 50;
                t.y = t.y + 50;
                t.y2 = t.y2 + 50;
                t.height = t.height + 50
            } else {
                t.x = t.x + 50;
                t.y = t.y + 50
            }
            t.id = null;
            copyArray.push(t)
        })
    }
}
function paste() {
    if (copyArray && copyArray.length > 0) {
        removeActive();
        var e = [];
        $.map(copyArray, function(t, r) {
            if (t) {
                var a = new DisgnerElement(t.type,t.x,t.y);
                syncElementData(a, t);
                d3.selectAll("svg g.active").classed("active", false);
                var n = createElement(a).classed("active", true).classed("select", true);
                if (copyArray.length == r + 1) {
                    if (a.type == "line") {
                        copyElement(n, openLineProperty)
                    } else if (a.type == "rect") {
                        copyElement(n, openRectProperty)
                    } else if (a.type == "circle") {
                        copyElement(n, openCircleProperty)
                    } else if (a.type == "ellipse") {
                        copyElement(n, openEllipseProperty)
                    } else if (a.type == "triangle") {
                        copyElement(n, openTriangleProperty)
                    } else if (a.type == "text") {
                        copyElement(n, openTextProperty)
                    } else if (a.type == "image") {
                        copyElement(n, openImageProperty)
                    } else if (a.type == "dataText") {
                        copyElement(n, openDataTextProperty)
                    } else if (a.type == "lightRect") {
                        copyElement(n, openLightRectProperty)
                    } else if (a.type == "lightCircle") {
                        copyElement(n, openLightCircleProperty)
                    } else if (a.type == "lightImage") {
                        copyElement(n, openLightImageProperty)
                    } else if (a.type == "fillHRect") {
                        copyElement(n, openFillRectProperty)
                    } else if (a.type == "fillVRect") {
                        copyElement(n, openFillRectProperty)
                    } else if (a.type == "dashboard") {
                        copyElement(n, openDashBoardProperty)
                    } else if (a.type == "controlText") {
                        copyElement(n, openControlProperty)
                    } else if (a.type == "controlImage") {
                        copyElement(n, openControlProperty)
                    } else if (a.type == "controlTextFixed") {
                        copyElement(n, openControlProperty)
                    } else if (a.type == "controlImageFixed") {
                        copyElement(n, openControlProperty)
                    } else if (a.type == "timer") {
                        copyElement(n, openTimerProperty)
                    } else if (a.type == "linkText") {
                        copyElement(n, openLinkProperty)
                    } else if (a.type == "linkImage") {
                        copyElement(n, openLinkProperty)
                    } else if (a.type == "openPageText") {
                        copyElement(n, openOpenPageProperty)
                    } else if (a.type == "openPageImage") {
                        copyElement(n, openOpenPageProperty)
                    } else if (a.type == "video") {
                        copyElement(n, openVideoProperty)
                    } else if (a.type == "scrollbar") {
                        copyElement(n, openScrollbarProperty)
                    } else if (a.type == "lineChart") {
                        copyElement(n, openLineChartProperty)
                    }
                } else {
                    copyElement(n, function() {})
                }
                e.push(a)
            }
        });
        undoArray.push({
            oper: "add",
            datas: e
        });
        if (undoArray && undoArray.length > 0) {
            var t = undoArray[undoArray.length - 1];
            if (t.oper == "add") {
                redoArray.splice(0, redoArray.length);
                $("#btnEleRedo").addClass("disabled");
                $("#btnEleUndo").removeClass("disabled")
            }
            if (undoArray.length > 10) {
                undoArray.splice(0, undoArray.length - 10)
            }
        }
    }
}
function saveElements() {
    var e = 0;
    var t = new FormData;
    t.append("ruleId", $("#ruleId").val());
    d3.selectAll("svg g.ele").each(function(r) {
        handlerDataNaN(r);
        t.append("list[" + e + "].id", r.id);
        t.append("list[" + e + "].type", r.type);
        t.append("list[" + e + "].x", Math.round(r.x));
        t.append("list[" + e + "].y", Math.round(r.y));
        t.append("list[" + e + "].x2", r.x2);
        t.append("list[" + e + "].y2", r.y2);
        t.append("list[" + e + "].width", Math.round(r.width));
        t.append("list[" + e + "].height", Math.round(r.height));
        t.append("list[" + e + "].radius", Math.round(r.radius));
        t.append("list[" + e + "].padding", Math.round(r.padding));
        t.append("list[" + e + "].fontFamily", r.fontFamily);
        t.append("list[" + e + "].fontSize", r.fontSize);
        t.append("list[" + e + "].fontWeight", r.fontWeight);
        t.append("list[" + e + "].color", r.color);
        t.append("list[" + e + "].content", r.content);
        t.append("list[" + e + "].showBg", r.showBg);
        t.append("list[" + e + "].fill", r.fill);
        t.append("list[" + e + "].stroke", r.stroke);
        t.append("list[" + e + "].strokeWidth", r.strokeWidth);
        t.append("list[" + e + "].strokeDasharray", r.strokeDasharray);
        t.append("list[" + e + "].strokeLinecap", r.strokeLinecap);
        t.append("list[" + e + "].href", r.href);
        t.append("list[" + e + "].signalFlag", r.signalFlag);
        t.append("list[" + e + "].trueAlter", r.trueAlter);
        t.append("list[" + e + "].falseAlter", r.falseAlter);
        t.append("list[" + e + "].seq", r.seq);
        t.append("list[" + e + "].posLock", r.posLock);
        e++
    });
    $.ajax({
        url: "DesignerElementAction!save.action",
        data: t,
        type: "POST",
        dataType: "json",
        processData: false,
        contentType: false,
        success: function(e) {
            $(window).unbind("beforeunload");
            $.messager.alert("成功", "保存成功!")
        },
        error: function(e) {
            if (e.responseText == "sessionOut") {
                $.messager.alert("失败", "会话丢失，请到其他页面重新登录，然后再保存!")
            } else {
                $.messager.alert("失败", "保存异常!")
            }
        }
    })
}
function importJson() {
    var e = new FormData;
    if ($("#importEleDialog #jsonFile").get(0).files[0]) {
        e.append("jfile", $("#importEleDialog #jsonFile").get(0).files[0])
    } else {
        $.messager.alert("提示", "请选择文件!");
        return
    }
    var t = $("#importEleDialog #jsonFile").get(0).files[0].name;
    if (t.indexOf(".edjs", t.length - 5) < 0) {
        $.messager.alert("提示", "文件类型错误,请导入.edjs类型文件!");
        return
    }
    e.append("conId", $("#conId").val());
    e.append("ruleId", $("#ruleId").val());
    $.messager.confirm("确定", "该操作会覆盖规则下所有组态设计，确定要导入吗?", function(t) {
        if (t) {
            $.ajax({
                url: "DesignerElementAction!importJson.action",
                data: e,
                type: "POST",
                dataType: "json",
                processData: false,
                contentType: false,
                success: function(e) {
                    if (e.result) {
                        window.location.reload()
                    } else {
                        $.messager.alert("提示", e.resultMsg)
                    }
                },
                error: function(e) {
                    if (e.responseText == "sessionOut") {
                        $.messager.alert("失败", "会话丢失，请重新登录!")
                    } else {
                        $.messager.alert("失败", "导入组态图异常！")
                    }
                }
            })
        }
    })
}
function saveByConId() {
    var e = 0;
    var t = new FormData;
    t.append("conId", $("#selectCon").val());
    t.append("ruleId", $("#ruleId").val());
    d3.selectAll("svg > g.select, svg > g.active").each(function(r) {
        handlerDataNaN(r);
        t.append("list[" + e + "].type", r.type);
        t.append("list[" + e + "].x", Math.round(r.x));
        t.append("list[" + e + "].y", Math.round(r.y));
        t.append("list[" + e + "].x2", r.x2);
        t.append("list[" + e + "].y2", r.y2);
        t.append("list[" + e + "].width", Math.round(r.width));
        t.append("list[" + e + "].height", Math.round(r.height));
        t.append("list[" + e + "].radius", Math.round(r.radius));
        t.append("list[" + e + "].padding", Math.round(r.padding));
        t.append("list[" + e + "].fontFamily", r.fontFamily);
        t.append("list[" + e + "].fontSize", r.fontSize);
        t.append("list[" + e + "].fontWeight", r.fontWeight);
        t.append("list[" + e + "].color", r.color);
        t.append("list[" + e + "].content", r.content);
        t.append("list[" + e + "].showBg", r.showBg);
        t.append("list[" + e + "].fill", r.fill);
        t.append("list[" + e + "].stroke", r.stroke);
        t.append("list[" + e + "].strokeWidth", r.strokeWidth);
        t.append("list[" + e + "].strokeDasharray", r.strokeDasharray);
        t.append("list[" + e + "].strokeLinecap", r.strokeLinecap);
        t.append("list[" + e + "].href", r.href);
        t.append("list[" + e + "].signalFlag", r.signalFlag);
        t.append("list[" + e + "].trueAlter", r.trueAlter);
        t.append("list[" + e + "].falseAlter", r.falseAlter);
        t.append("list[" + e + "].seq", r.seq);
        t.append("list[" + e + "].posLock", r.posLock);
        e++
    });
    $.ajax({
        url: "DesignerElementAction!saveByConId.action",
        data: t,
        type: "POST",
        dataType: "json",
        processData: false,
        contentType: false,
        success: function(e) {
            if (e.result) {
                $.messager.alert("成功", "复制成功!")
            } else {
                $.messager.alert("成功", "复制失败!")
            }
            $("#copyToPageDialog").dialog("close")
        },
        error: function(e) {
            if (e.responseText == "sessionOut") {
                $.messager.alert("失败", "会话丢失，请重新登录!")
            } else {
                $.messager.alert("失败", "复制异常!")
            }
            $("#copyToPageDialog").dialog("close")
        }
    })
}
function refreshSession() {
    $.ajax({
        url: "LoginAction!refreshSession.action",
        data: {},
        type: "POST",
        dataType: "json",
        success: function(e) {
            if (e.result) {
                console.log("刷新会话成功!")
            } else {
                console.log("刷新会话失败!")
            }
        },
        error: function(e) {
            if (e.responseText == "sessionOut") {
                $.messager.alert("失败", "会话丢失，请重新登录!")
            }
        }
    })
}
$(function() {
    $("#btnLightCircle").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initLightCircle()
    })
});
function initLightCircle() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("lightCircle",e[0],e[1]);
        t.content = "X!=0";
        var r = createLightCircle(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > circle").attr("r"));
        if (e + d3.event.dx < 0) {
            return false
        }
        d3.selectAll("svg > g.active > circle").attr("r", function(e) {
            e.width += d3.event.dx;
            return e.width
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x)
        }).attr("y", function(e) {
            return Math.round(e.y)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveCirclePoint(d3.select("svg > g.active"));
            addElement(e, openLightCircleProperty)
        }
    }
}
function createLightCircle(e) {
    if (!e.signalName) {
        e.signalName = "请绑定数据!"
    }
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("circle").classed("light-circle", true).attr("cx", function(e) {
        return e.x
    }).attr("cy", function(e) {
        return e.y
    }).attr("r", function(e) {
        return e.width
    }).style({
        fill: e.trueAlter,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.append("text").classed("light-circle", true).attr("x", function(e) {
        return Math.round(e.x)
    }).attr("y", function(e) {
        return Math.round(e.y)
    }).attr("dy", ".3em").style("fill", e.falseAlter).text(e.signalName);
    r.on("click", openLightCircleProperty);
    drawAllCirclePoint(r, function() {
        r.select("text").attr("x", function(e) {
            return Math.round(e.x)
        }).attr("y", function(e) {
            return Math.round(e.y)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openLightCircleProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/light_circle.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleSignalName").val(e.signalName);
        if (e.content) {
            var r = e.content.replace(/[0-9\.\-]/gi, "").replace("X", "");
            $("#eleContentSelect").val(r);
            var a = e.content.replace(/[^0-9\.\-]/gi, "");
            $("#eleContentInput").val(a)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleFalseAlter").cxColor({
                color: e.falseAlter
            });
            $("#eleTrueAlter").cxColor({
                color: e.trueAlter
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.falseAlter.length > 0) {
                $("#eleFalseAlter").cxColor(function(t) {
                    t.color(e.falseAlter)
                })
            }
            if (e.trueAlter.length > 0) {
                $("#eleTrueAlter").cxColor(function(t) {
                    t.color(e.trueAlter)
                })
            }
        }
    }
}
$(function() {
    $("#btnLightImage").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initLightImage()
    })
});
function initLightImage() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("lightImage",e[0],e[1]);
        t.content = "X!=0";
        t.trueAlter = "";
        t.falseAlter = "";
        var r = createLightImage(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > image").attr("width"));
        var t = parseInt(d3.select("svg > g.active > image").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > image").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveImagePoint(d3.select("svg > g.active"));
            addElement(e, openLightImageProperty)
        }
    }
}
function createLightImage(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("image").classed("light-image", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).attr("xlink:href", function(e) {
        return initCDN + "userimg/" + e.trueAlter
    });
    r.attr("transform", function(e) {
        return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
    });
    r.on("click", openLightImageProperty);
    drawAllImagePoint(r, function() {
        r.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    changeImagePointCursor(r);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openLightImageProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t()
    } else {
        $("#propertyPanel").empty().load("designer/property/light_image.html", function() {
            t()
        })
    }
    function t() {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleTrueAlter").attr("src", initCDN + "userimg/" + e.trueAlter);
        $("#eleFalseAlter").attr("src", initCDN + "userimg/" + e.falseAlter);
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleSignalName").val(e.signalName);
        if (e.content) {
            var t = e.content.replace(/[0-9\.\-]/gi, "").replace("X", "");
            $("#eleContentSelect").val(t);
            var r = e.content.replace(/[^0-9\.\-]/gi, "");
            $("#eleContentInput").val(r)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
    }
}
$(function() {
    $("#btnLightRect").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initLightRect()
    })
});
function initLightRect() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("lightRect",e[0],e[1]);
        t.content = "X!=0";
        var r = createLightRect(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openLightRectProperty)
        }
    }
}
function createLightRect(e) {
    if (!e.signalName) {
        e.signalName = "请绑定数据!"
    }
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("light-rect", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.trueAlter,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.append("text").classed("light-rect", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("fill", function(e) {
        return e.falseAlter
    }).text(e.signalName);
    r.on("click", openLightRectProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openLightRectProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/light_rect.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleSignalFlag").val(e.signalFlag);
        $("#eleSignalName").val(e.signalName);
        if (e.content) {
            var r = e.content.replace(/[0-9\.\-]/gi, "").replace("X", "");
            $("#eleContentSelect").val(r);
            var a = e.content.replace(/[^0-9\.\-]/gi, "");
            $("#eleContentInput").val(a)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleFalseAlter").cxColor({
                color: e.falseAlter
            });
            $("#eleTrueAlter").cxColor({
                color: e.trueAlter
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.falseAlter.length > 0) {
                $("#eleFalseAlter").cxColor(function(t) {
                    t.color(e.falseAlter)
                })
            }
            if (e.trueAlter.length > 0) {
                $("#eleTrueAlter").cxColor(function(t) {
                    t.color(e.trueAlter)
                })
            }
        }
    }
}
$(function() {
    $("#btnShapeCircle").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initCircle()
    })
});
function initCircle() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("circle",e[0],e[1]);
        var r = createCircle(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > circle").attr("r"));
        if (e + d3.event.dx < 0) {
            return false
        }
        d3.select("svg > g.active > circle").attr("r", function(e) {
            e.width += d3.event.dx;
            return e.width
        })
    }
    function a() {
        var e = d3.select("svg > g.active > circle").data()[0];
        if (e.width < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveCirclePoint(d3.select("svg > g.active"));
            addElement(e, openCircleProperty)
        }
    }
}
function createCircle(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("circle").classed("shape-circle", true).attr("cx", function(e) {
        return e.x
    }).attr("cy", function(e) {
        return e.y
    }).attr("r", function(e) {
        return e.width
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.on("click", openCircleProperty);
    drawAllCirclePoint(r, resetForm);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openCircleProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/circle.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
        }
    }
}
$(function() {
    $("#btnShapeEllipse").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initEllipse()
    })
});
function initEllipse() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("ellipse",e[0],e[1]);
        var r = createEllipse(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        d3.select("svg > g.active > ellipse").attr("rx", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("ry", function(e) {
            e.height += d3.event.dy;
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active > ellipse").data()[0];
        var t = parseInt(d3.select("svg > g.active > ellipse").attr("rx"));
        var r = parseInt(d3.select("svg > g.active > ellipse").attr("ry"));
        if (t < 2 || r < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveEllipsePoint(d3.select("svg > g.active"));
            addElement(e, openEllipseProperty)
        }
    }
}
function createEllipse(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("ellipse").classed("shape-ellipse", true).attr("cx", function(e) {
        return e.x
    }).attr("cy", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.width
    }).attr("ry", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.on("click", openEllipseProperty);
    drawAllEllipsePoint(r, resetForm);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openEllipseProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/ellipse.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
        }
    }
}
$(function() {
    $("#btnShapeImage").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initImage()
    })
});
function initImage() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("image",e[0],e[1]);
        var r = createImage(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > image").attr("width"));
        var t = parseInt(d3.select("svg > g.active > image").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > image").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveImagePoint(d3.select("svg > g.active"));
            addElement(e, openImageProperty)
        }
    }
}
function createImage(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("image").classed("shape-image", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).attr("xlink:href", function(e) {
        return initCDN + "userimg/" + e.href
    });
    r.attr("transform", function(e) {
        return "rotate(" + e.radius + "," + e.x2 + "," + e.y2 + ")"
    });
    r.on("click", openImageProperty);
    drawAllImagePoint(r, function() {
        r.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    changeImagePointCursor(r);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openImageProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t()
    } else {
        $("#propertyPanel").empty().load("designer/property/image.html", function() {
            t()
        })
    }
    function t() {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleHref").attr("src", e.href);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
    }
}
$(function() {
    $("#btnShapeLine").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initLine()
    })
});
function initLine() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("line",e[0],e[1]);
        t.width = e[0];
        t.height = e[1];
        var r = createLine(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        d3.select("svg g.active line.shape-line").attr("x2", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("y2", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg g.active line.shape-line-border").attr("x2", function(e) {
            return e.width
        }).attr("y2", function(e) {
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active > line.shape-line").data()[0];
        var t = Math.abs(e.x - e.width);
        var r = Math.abs(e.y - e.height);
        if (t < 2 && r < 2) {
            d3.select("svg g.active").remove()
        } else {
            moveLinePoint(d3.select("svg > g.active"));
            addElement(e, openLineProperty)
        }
    }
}
function createLine(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("line").classed("shape-line", true).attr("x1", e.x).attr("y1", e.y).attr("x2", e.width).attr("y2", e.height).style({
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.append("line").classed("shape-line-border", true).attr("x1", e.x).attr("y1", e.y).attr("x2", e.width).attr("y2", e.height);
    r.on("click", openLineProperty);
    drawAllLinePoint(r, resetForm);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openLineProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else { 
        $("#propertyPanel").empty().load("designer/property/line.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleStroke").cxColor({
            color: e.stroke
        });
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleStroke").cxColor({
                color: e.stroke
            })
        } else {
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
        }
    }
}
$(function() {
    $("#btnShapeLink").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initLink()
    })
});
function initLink() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("linkText",e[0],e[1]);
        t.showBg = 1;
        t.radius = 5;
        t.trueAlter = "";
        t.falseAlter = "_blank";
        t.fill = "#09c";
        t.color = "#fff";
        t.stroke = "#09c";
        var r = createLinkText(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openLinkProperty)
        }
    }
}
function createLinkText(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("link-text", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("text").classed("link-text", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(function(e) {
        return e.content
    });
    r.on("click", openLinkProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function createLinkImage(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("image").classed("link-image", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).attr("xlink:href", function(e) {
        return initCDN + "userimg/" + e.href
    });
    r.on("click", openLinkProperty);
    drawAllImagePoint(r, function() {
        r.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openLinkProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && ($("#activePanel").val() == "linkText" || $("#activePanel").val() == "linkImage")) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/link.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#LinkForm #showBg0").prop("checked", true);
            $("#LinkForm #showBg1").prop("checked", false)
        } else {
            $("#LinkForm #showBg0").prop("checked", false);
            $("#LinkForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        $("#eleContent").val(e.content);
        $("#eleTrueAlter").val(e.trueAlter);
        $("#eleFalseAlter").val(e.falseAlter);
        $("#eleLinkHref").attr("src", initCDN + "userimg/" + e.href);
        r(e.type)
    }
    function r(e) {
        if (e == "linkText") {
            $("#LinkForm tr.linkText").show();
            $("#LinkForm tr.linkImage").hide();
            $("#LinkForm #showText").prop("checked", true);
            $("#LinkForm #showImage").prop("checked", false)
        } else if (e == "linkImage") {
            $("#LinkForm tr.linkText").hide();
            $("#LinkForm tr.linkImage").show();
            $("#LinkForm #showText").prop("checked", false);
            $("#LinkForm #showImage").prop("checked", true)
        }
    }
}
function resetLinkText(e) {
    e.selectAll("rect,text,image,g").remove();
    var t = e.data()[0];
    e.append("rect").classed("link-text", true).attr("x", t.x).attr("y", t.y).attr("rx", t.radius).attr("ry", t.radius).attr("width", t.width).attr("height", t.height).style({
        fill: t.fill,
        stroke: t.stroke,
        "stroke-width": t.strokeWidth,
        "stroke-dasharray": t.strokeDasharray,
        opacity: t.showBg
    });
    e.append("text").classed("link-text", true).attr("x", Math.round(t.x + t.width / 2)).attr("y", Math.round(t.y + t.height / 2)).attr("dy", ".3em").style("font-family", t.fontFamily).style("font-size", t.fontSize).style("font-weight", t.fontWeight).style("fill", t.color).text(t.content);
    e.on("click", openLinkProperty);
    drawAllRectPoint(e, function() {
        e.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (t.posLock) {
        e.classed("lock", true)
    }
    e.classed("active", true);
    e.classed("select", true);
    $("#LinkForm tr.linkText").show();
    $("#LinkForm tr.linkImage").hide()
}
function resetLinkImage(e) {
    e.selectAll("rect,text,image,g").remove();
    var t = e.data()[0];
    e.append("image").classed("link-image", true).attr("x", t.x).attr("y", t.y).attr("width", t.width).attr("height", t.height).attr("xlink:href", "userimg/" + t.href);
    e.on("click", openLinkProperty);
    drawAllImagePoint(e, function() {
        e.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (t.posLock) {
        e.classed("lock", true)
    }
    e.classed("active", true);
    e.classed("select", true);
    $("#LinkForm tr.linkText").hide();
    $("#LinkForm tr.linkImage").show()
}
$(function() {
    $("#btnShapeRect").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initRect()
    })
});
function initRect() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("rect",e[0],e[1]);
        var r = createRect(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.select("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openRectProperty)
        }
    }
}
function createRect(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("shape-rect", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.on("click", openRectProperty);
    drawAllRectPoint(r, resetForm);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openRectProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/rect.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
        }
    }
}
$(function() {
    $("#btnShapeText").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initText()
    })
});
function initText() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("text",e[0],e[1]);
        t.trueAlter = "middle";
        var r = createText(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openTextProperty)
        }
    }
}
function createText(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("shape-text", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("text").classed("shape-text", true).attr("x", function(e) {
        if ("start" == e.trueAlter) {
            return e.x
        } else if ("end" == e.trueAlter) {
            return Math.round(e.x + e.width)
        } else {
            return Math.round(e.x + e.width / 2)
        }
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("text-anchor", function(e) {
        return e.trueAlter
    }).style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(function(e) {
        return e.content
    });
    r.on("click", openTextProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            if ("start" == e.trueAlter) {
                return e.x
            } else if ("end" == e.trueAlter) {
                return Math.round(e.x + e.width)
            } else {
                return Math.round(e.x + e.width / 2)
            }
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openTextProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/text.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleTrueAlter").val(e.trueAlter);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#textForm #showBg0").prop("checked", true);
            $("#textForm #showBg1").prop("checked", false)
        } else {
            $("#textForm #showBg0").prop("checked", false);
            $("#textForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        $("#eleContent").val(e.content)
    }
}
$(function() {
    $("#btnTimer").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initTimer()
    })
});
function initTimer() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("timer",e[0],e[1]);
        t.content = "hh:mm:ss";
        var r = createTimer(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > rect").attr("width"));
        var t = parseInt(d3.select("svg > g.active > rect").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > rect").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        });
        d3.select("svg > g.active > text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveRectPoint(d3.select("svg > g.active"));
            addElement(e, openTimerProperty)
        }
    }
}
function createTimer(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("rect").classed("timer-text", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("rx", function(e) {
        return e.radius
    }).attr("ry", function(e) {
        return e.radius
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray,
        opacity: e.showBg
    });
    r.append("text").classed("timer-text", true).attr("x", function(e) {
        return Math.round(e.x + e.width / 2)
    }).attr("y", function(e) {
        return Math.round(e.y + e.height / 2)
    }).attr("dy", ".3em").style("font-family", function(e) {
        return e.fontFamily
    }).style("font-size", function(e) {
        return e.fontSize
    }).style("font-weight", function(e) {
        return e.fontWeight
    }).style("fill", function(e) {
        return e.color
    }).text(function(e) {
        return (new Date).Format(e.content)
    });
    r.on("click", openTimerProperty);
    drawAllRectPoint(r, function() {
        r.select("text").attr("x", function(e) {
            return Math.round(e.x + e.width / 2)
        }).attr("y", function(e) {
            return Math.round(e.y + e.height / 2)
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openTimerProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/timer.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleRadius").numberspinner("setValue", e.radius);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        $("#eleFontFamily").val(e.fontFamily);
        $("#eleFontSize").val(e.fontSize);
        $("#eleFontWeight").val(e.fontWeight);
        if (e.showBg == "0") {
            $("#timerForm #showBg0").prop("checked", true);
            $("#timerForm #showBg1").prop("checked", false)
        } else {
            $("#timerForm #showBg0").prop("checked", false);
            $("#timerForm #showBg1").prop("checked", true)
        }
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            });
            $("#eleColor").cxColor({
                color: e.color
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
            if (e.color.length > 0) {
                $("#eleColor").cxColor(function(t) {
                    t.color(e.color)
                })
            }
        }
        $("#eleContent").val(e.content)
    }
}
$(function() {
    $("#btnShapeTriangle").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initTriangle()
    })
});
function initTriangle() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("triangle",e[0],e[1]);
        t.width = e[0];
        t.height = e[1];
        var r = createTriangle(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        d3.select("svg > g.active > polygon.shape-triangle").attr("points", function(e) {
            e.width += d3.event.dx;
            e.height += d3.event.dy;
            e.x2 = e.width;
            e.y2 = e.y;
            return e.x + "," + e.y + " " + e.x2 + "," + e.y2 + " " + e.width + "," + e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active > polygon.shape-triangle").data()[0];
        if (Math.abs(e.x - e.width) < 2 || Math.abs(e.y - e.height) < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveTrianglePoint(d3.select("svg > g.active"));
            addElement(e, openTriangleProperty)
        }
    }
}
function createTriangle(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("polygon").classed("shape-triangle", true).attr("points", function(e) {
        return e.x + "," + e.y + " " + e.x2 + "," + e.y2 + " " + e.width + "," + e.height
    }).style({
        fill: e.fill,
        stroke: e.stroke,
        "stroke-width": e.strokeWidth,
        "stroke-dasharray": e.strokeDasharray
    });
    r.on("click", openTriangleProperty);
    drawAllTrianglePoint(r, resetForm);
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openTriangleProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t(false)
    } else {
        $("#propertyPanel").empty().load("designer/property/triangle.html", function() {
            t(true)
        })
    }
    function t(t) {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleX2").numberspinner("setValue", e.x2);
        $("#eleY2").numberspinner("setValue", e.y2);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        $("#eleStrokeDasharray").setStrokeDasharray(e.strokeDasharray);
        $("#eleStrokeWidth").setStrokeWidth(e.strokeWidth);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
        if (t) {
            $("#eleFill").cxColor({
                color: e.fill
            });
            $("#eleStroke").cxColor({
                color: e.stroke
            })
        } else {
            if (e.fill.length > 0) {
                $("#eleFill").cxColor(function(t) {
                    t.color(e.fill)
                })
            }
            if (e.stroke.length > 0) {
                $("#eleStroke").cxColor(function(t) {
                    t.color(e.stroke)
                })
            }
        }
    }
}
$(function() {
    $("#btnVideo").click(function(e) {
        $(".left-menu ul li div.active, #btnEleSelect").removeClass("active");
        $("svg.designer-container").css("cursor", "crosshair");
        $(this).addClass("active");
        initVideo()
    })
});
function initVideo() {
    var e = d3.behavior.drag().on("dragstart", t).on("drag", r).on("dragend", a);
    d3.select("svg").call(e);
    function t() {
        var e = d3.mouse(this);
        removeActive();
        var t = new DisgnerElement("video",e[0],e[1]);
        t.seq = 1e4;
        var r = createVideo(t);
        r.classed("active", true);
        r.classed("select", true)
    }
    function r() {
        var e = parseInt(d3.select("svg > g.active > image").attr("width"));
        var t = parseInt(d3.select("svg > g.active > image").attr("height"));
        if (e + d3.event.dx < 0) {
            return false
        }
        if (t + d3.event.dy < 0) {
            return false
        }
        d3.selectAll("svg > g.active > image").attr("width", function(e) {
            e.width += d3.event.dx;
            return e.width
        }).attr("height", function(e) {
            e.height += d3.event.dy;
            return e.height
        })
    }
    function a() {
        var e = d3.select("svg > g.active").data()[0];
        if (e.width < 2 || e.height < 2) {
            d3.select("svg > g.active").remove()
        } else {
            moveImagePoint(d3.select("svg > g.active"));
            addElement(e, openVideoProperty)
        }
    }
}
function createVideo(e) {
    var t = d3.behavior.drag().on("dragstart", dragEleStart).on("drag", dragEleMove).on("dragend", dragEleEnd);
    var r = d3.select("svg").append("g").attr("id", "ele_" + e.id).classed("ele", true).data([e]).call(t);
    r.append("image").classed("shape-video", true).attr("x", function(e) {
        return e.x
    }).attr("y", function(e) {
        return e.y
    }).attr("width", function(e) {
        return e.width
    }).attr("height", function(e) {
        return e.height
    }).attr("xlink:href", initCDN + "common/img/video.jpg").attr("preserveAspectRatio", "none");
    r.on("click", openVideoProperty);
    drawAllImagePoint(r, function() {
        r.select("image").attr("x", function(e) {
            return e.x
        }).attr("y", function(e) {
            return e.y
        }).attr("width", function(e) {
            return e.width
        }).attr("height", function(e) {
            return e.height
        });
        resetForm()
    });
    if (e.posLock) {
        r.classed("lock", true)
    }
    return r
}
function openVideoProperty(e) {
    if (d3.event && d3.event.type == "click") {
        d3.event.stopPropagation()
    }
    if ($("#propertyPanel").find("form").length > 0 && $("#activePanel").val() == e.type) {
        t()
    } else {
        $("#propertyPanel").empty().load("designer/property/video.html", function() {
            t()
        })
    }
    function t() {
        $("form input[name='ele.id']").val(e.id);
        $("#activePanel").val(e.type);
        $("#eleX").numberspinner("setValue", e.x);
        $("#eleY").numberspinner("setValue", e.y);
        $("#eleWidth").numberspinner("setValue", e.width);
        $("#eleHeight").numberspinner("setValue", e.height);
        if (e.posLock) {
            $("#elePosLock").switchbutton("check")
        } else {
            $("#elePosLock").switchbutton("uncheck")
        }
    }
}
